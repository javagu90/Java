/*
 * jdlg_Asignar_Op_Bus.java
 *
 * Created on 7 de mayo de 2008, 06:56 PM
 */

package tmspuertas;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.IOException;
import java.net.Socket;
import java.util.Vector;
import javax.swing.JRootPane;
import javax.swing.JTextField;

/**
 *
 * @author  vgonzalez
 */
public class jdlg_Asignar_Op_Bus extends javax.swing.JDialog {
    private boolean operAsig = false;
    private boolean busAsig = false;
    private long busId = 0;
    private String busNumero = "";
    private long operadorId =0;
    private String operadorCalve = "";
    private String plantilla = "";
    private long plantillaId =0;
    private boolean asignado = false;
    private String ipAS;
    private int portAS;
    private Vector nombreEmpresas;
    private long ocupacionSusutituir;
    private long ocupados;
    private boolean respuestaSN = false;
    private  String fecha;
    
    /** Creates new form jdlg_Asignar_Op_Bus */
    public jdlg_Asignar_Op_Bus(TmsPuertasManagedBean pbusquedas,String pipAS, int pportAS, Vector pnombreEmpresas, long pocupacionSusutituir, String pfecha ) {
        initComponents();
        this.setDefaultLookAndFeelDecorated(true);
        //this.setUndecorated(true);
        this.setAlwaysOnTop(true);
        this.setModal(true);
        this.busquedas = pbusquedas;
        this.ipAS = pipAS;
        this.portAS = pportAS;
        this.fecha = pfecha;
        this.setTitle("Asignacion de Operador y Autobus");
        this.setResizable(false);
        this.nombreEmpresas = pnombreEmpresas;
        this.ocupacionSusutituir = pocupacionSusutituir;
        jlbl_barraEstado.setText("<html>  <font color=FF0000>ESC </font> Cancelar | <font color=FF0000>F9 </font> Asignar datos </html>");
        jlbl_barraEstado.setHorizontalAlignment( JTextField.CENTER );
            Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
            Dimension DilaogSize = this.getSize();
            if (DilaogSize.height > screenSize.height) {
                DilaogSize.height = screenSize.height;
            }
            if (DilaogSize.width > screenSize.width) {
                DilaogSize.width = screenSize.width;
            }
            this.setLocation( ( screenSize.width - DilaogSize.width ) / 2, ( screenSize.height - DilaogSize.height ) / 2 );            this.setDefaultLookAndFeelDecorated(true);
            this.getRootPane().setWindowDecorationStyle(JRootPane.INFORMATION_DIALOG);
            jcmbx_empresas.removeAllItems();
            for(int i=0; i<nombreEmpresas.size(); i++)
                jcmbx_empresas.addItem(nombreEmpresas.get(i).toString());
            jtxt_autobus.selectAll();
            jtxt_autobus.requestFocus();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jtxt_operador = new javax.swing.JTextField();
        jtxt_autobus = new javax.swing.JTextField();
        jtxt_nombreOperador = new javax.swing.JTextField();
        jlbl_barraEstado = new javax.swing.JLabel();
        jcmbx_empresas = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Operador: ");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Autobus:");

        jtxt_operador.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxt_operadorKeyPressed(evt);
            }
        });

        jtxt_autobus.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxt_autobusKeyPressed(evt);
            }
        });

        jtxt_nombreOperador.setEditable(false);
        jtxt_nombreOperador.setFocusable(false);

        jlbl_barraEstado.setFont(new java.awt.Font("Tahoma", 1, 12));
        jlbl_barraEstado.setText("jLabel3");
        jlbl_barraEstado.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jcmbx_empresas.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcmbx_empresas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jcmbx_empresasKeyPressed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel3.setText("Empresa:");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)
                        .add(4, 4, 4))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(jLabel2)
                        .add(12, 12, 12)))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jtxt_operador, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 58, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jtxt_autobus, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 58, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jtxt_nombreOperador, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 346, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(layout.createSequentialGroup()
                        .add(jLabel3)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jcmbx_empresas, 0, 287, Short.MAX_VALUE)))
                .addContainerGap())
            .add(jlbl_barraEstado, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 507, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jtxt_autobus, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel2)
                    .add(jLabel3)
                    .add(jcmbx_empresas, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(16, 16, 16)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jtxt_nombreOperador, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel1)
                    .add(jtxt_operador, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 19, Short.MAX_VALUE)
                .add(jlbl_barraEstado, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 29, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jcmbx_empresasKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jcmbx_empresasKeyPressed
         if(evt.getKeyCode() == evt.VK_ESCAPE)
         {
             this.setAsignado(false);
             this.dispose();
         }

          if(evt.getKeyCode() == evt.VK_RIGHT || evt.getKeyCode() == evt.VK_ENTER)
         {
             jtxt_operador.selectAll();
             jtxt_operador.requestFocus();
         }
         
          if(evt.getKeyCode() == evt.VK_LEFT)
         {
             jtxt_autobus.selectAll();
             jtxt_autobus.requestFocus();
         }

         if(evt.getKeyCode() == evt.VK_F9)
             Asignar();
        
    }//GEN-LAST:event_jcmbx_empresasKeyPressed

    private void jtxt_autobusKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxt_autobusKeyPressed
         if(evt.getKeyCode() == evt.VK_ESCAPE)
         {
             this.setAsignado(false);
             this.dispose();
         }

         if(evt.getKeyCode() == evt.VK_ENTER)
         {
             if(jtxt_autobus.getText().equals(""))
             {
                new jdlg_error("¡Debes escribir el numero económico!","","¡Faltan datos!").setVisible(true);
                return;
             }
              if(!abreSocketAS()){
               new  jdlg_error_conexionBD_NET("En este momento no es posible realizar la operación.","Intentelo mas tarde.","¡No existe una conexión con la Base de Datos!").setVisible(true);
               return;
                }
             Vector vbus = busquedas.facadeGeneralPuertasRemote.buscaBusPorNumeroParaAsignar(jtxt_autobus.getText(),jcmbx_empresas.getSelectedItem().toString());
             if(vbus.size()==0)
               {
                    new jdlg_advertencia("¡El Autobus no esta dado de alta en el sistema o no esta asiganado a la empresa "+jcmbx_empresas.getSelectedItem().toString()+" !","","¡Autobus no encontrado!").setVisible(true);
                    busAsig = false;
                    jtxt_autobus.selectAll();
                    jtxt_autobus.requestFocus();
                    return;
               }
               else
               {
                 busAsig= true;
                 Vector bus= (Vector) vbus.get(0);
                 this.setBusId(Long.valueOf(bus.get(0).toString()));
                 this.setBusNumero(jtxt_autobus.getText());
                 if(bus.get(1)!=null){
                     //operAsig = true;
                     operAsig = false;
                     this.setOperadorCalve(bus.get(1).toString());
                     this.setOperadorId(Long.valueOf(bus.get(2).toString()));
                     jtxt_operador.setText(bus.get(1).toString());
                     jtxt_nombreOperador.setText(bus.get(3).toString());
                 }
                     this.setPlantillaId(Long.valueOf(bus.get(4).toString()));
                     this.setPlantilla(bus.get(5).toString());
                     this.ocupados = Long.valueOf(bus.get(6).toString());
                 jtxt_operador.selectAll();
                 jtxt_operador.requestFocus();
               }
                 
         }

         if(evt.getKeyCode() == evt.VK_UP)
         {
             jtxt_operador.selectAll();
             jtxt_operador.requestFocus();
         }
         
         if(evt.getKeyCode() == evt.VK_DOWN)
            jcmbx_empresas.requestFocus();

         if(evt.getKeyCode() == evt.VK_F9)
             Asignar();
         
    }//GEN-LAST:event_jtxt_autobusKeyPressed

    private void jtxt_operadorKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxt_operadorKeyPressed
         if(evt.getKeyCode() == evt.VK_ESCAPE)
         {
             this.setAsignado(false);
             this.dispose();
         }

         if(evt.getKeyCode() == evt.VK_ENTER)
         {
             if(jtxt_operador.getText().equals(""))
             {
                new jdlg_error("¡Debes escribir la clave del operador!","","¡Faltan datos!").setVisible(true);
                jtxt_nombreOperador.setText("");
                return;
             }
          if(!abreSocketAS()){
           new  jdlg_error_conexionBD_NET("En este momento no es posible realizar la operación.","Intentelo mas tarde.","¡No existe una conexión con la Base de Datos!").setVisible(true);
           return;
            }
           Vector vop= busquedas.facadeGeneralPuertasRemote.buscaOperadorPorClaveParaAsignar(jtxt_operador.getText(),jcmbx_empresas.getSelectedItem().toString());
           if(vop.size()==0)
           {
                new jdlg_advertencia("¡El operador no esta dado de alta en el sistema, esta dado de baja o no esta asiganado a la empresa "+jcmbx_empresas.getSelectedItem().toString()+" !","","¡Operador no encontrado!").setVisible(true);
                operAsig = false;
                return;
           }
           else
           {
              Vector op = (Vector) vop.get(0);
              jtxt_nombreOperador.setText(op.get(1).toString());
              this.setOperadorId(Long.valueOf(op.get(0).toString()));
              this.setOperadorCalve(jtxt_operador.getText());
              operAsig = true;
              jtxt_autobus.selectAll();
              jtxt_autobus.requestFocus();
           }
         }

         if(evt.getKeyCode() == evt.VK_DOWN   )
         {
             jtxt_autobus.selectAll();
             jtxt_autobus.requestFocus();
         }
         
         if(evt.getKeyCode() == evt.VK_UP)
            jcmbx_empresas.requestFocus();
         
         if(evt.getKeyCode() == evt.VK_F9)
             Asignar();
    }//GEN-LAST:event_jtxt_operadorKeyPressed

    private void Asignar(){
    System.out.println("busAsig= "+busAsig+"  operAsig="+operAsig);
        if(!operAsig)
        {
             if(jtxt_operador.getText().equals(""))
             {
                new jdlg_error("¡Debes escribir la clave del operador!","","¡Faltan datos!").setVisible(true);
                jtxt_nombreOperador.setText("");
                return;
             }
          if(!abreSocketAS()){
           new  jdlg_error_conexionBD_NET("En este momento no es posible realizar la operación.","Intentelo mas tarde.","¡No existe una conexión con la Base de Datos!").setVisible(true);
           return;
            }
           Vector vop= busquedas.facadeGeneralPuertasRemote.buscaOperadorPorClaveParaAsignar(jtxt_operador.getText(),jcmbx_empresas.getSelectedItem().toString());
           if(vop.size()==0)
           {
                new jdlg_advertencia("¡El operador no esta dado de alta en el sistema, esta dado de baja o no esta asiganado a la empresa "+jcmbx_empresas.getSelectedItem().toString()+" !","","¡Operador no encontrado!").setVisible(true);
                operAsig = false;
                jtxt_operador.selectAll();
                jtxt_operador.requestFocus();
                return;
           }
           else
           {
             //Valida las incidencias del operador
              String resp = busquedas.facadeGeneralPuertasRemote.getValidaIncicenciaOper(jtxt_operador.getText(), this.fecha);
              if(!resp.equals(""))
               {
                    new jdlg_advertencia(resp,"","¡Operador con Incidencias!").setVisible(true);
                    operAsig = false;
                    jtxt_operador.selectAll();
                    jtxt_operador.requestFocus();
                    return;
               }
              else
                {
                  Vector op = (Vector) vop.get(0);
                  jtxt_nombreOperador.setText(op.get(1).toString());
                  this.setOperadorId(Long.valueOf(op.get(0).toString()));
                  this.setOperadorCalve(jtxt_operador.getText());
                  operAsig = true;
                  jtxt_autobus.selectAll();
                  jtxt_autobus.requestFocus();
               }
           }
        }
        
        if(!busAsig)
        {
            System.out.println("entra a buscar el bus..."); 
            if(jtxt_autobus.getText().equals(""))
             {
                new jdlg_error("¡Debes escribir el numero económico!","","¡Faltan datos!").setVisible(true);
                return;
             }
             Vector vbus = busquedas.facadeGeneralPuertasRemote.buscaBusPorNumeroParaAsignar(jtxt_autobus.getText(),jcmbx_empresas.getSelectedItem().toString());
             if(vbus.size()==0)
               {
                    new jdlg_advertencia("¡El Autobus no esta dado de alta en el sistema  o no esta asiganado a la empresa "+jcmbx_empresas.getSelectedItem().toString()+" !","","¡Autobus no encontrado!").setVisible(true);
                    busAsig = false;
                    jtxt_autobus.selectAll();
                    jtxt_autobus.requestFocus();
                    return;
               }
               else
               {
                 Vector bus= (Vector) vbus.get(0);
                 this.ocupados = Long.valueOf(bus.get(6).toString());
                 if(ocupados<ocupacionSusutituir)
                 {
                      jdlg_pregunta_SN psn =  new jdlg_pregunta_SN("Asientos insuficientes", "El autobus no tiene suficientes asientos. ¿Desea asignar aún asi el autobus?");
                      psn.setVisible(true);
                      if(respuestaSN)
                      {
                         busAsig= true;
                         this.setBusId(Long.valueOf(bus.get(0).toString()));
                         this.setBusNumero(jtxt_autobus.getText());
//                         if(bus.get(1)!=null){
//                             operAsig = true;
//                             this.setOperadorCalve(bus.get(1).toString());
//                             this.setOperadorId(Long.valueOf(bus.get(2).toString()));
//                             jtxt_operador.setText(bus.get(1).toString());
//                             jtxt_nombreOperador.setText(bus.get(3).toString());
//                         }
                             this.setPlantillaId(Long.valueOf(bus.get(4).toString()));
                             this.setPlantilla(bus.get(5).toString());
                      }
                      else
                      {
                        busAsig = false;
                        jtxt_autobus.selectAll();
                        jtxt_autobus.requestFocus();
                         return;
                      }
                 }
                  else
                  {
//                    busAsig = false;
//                    jtxt_autobus.selectAll();
//                    jtxt_autobus.requestFocus();
//                     return;
                         busAsig= true;
                         this.setBusId(Long.valueOf(bus.get(0).toString()));
                         this.setBusNumero(jtxt_autobus.getText());
//                         if(bus.get(1)!=null){
//                             operAsig = true;
//                             this.setOperadorCalve(bus.get(1).toString());
//                             this.setOperadorId(Long.valueOf(bus.get(2).toString()));
//                             jtxt_operador.setText(bus.get(1).toString());
//                             jtxt_nombreOperador.setText(bus.get(3).toString());
//                         }
                             this.setPlantillaId(Long.valueOf(bus.get(4).toString()));
                             this.setPlantilla(bus.get(5).toString());                     
                  }
                 jtxt_operador.selectAll();
                 jtxt_operador.requestFocus();
               }
                             
        }

        if(busAsig && operAsig)
        {
             //Valida las incidencias del operador
              String resp = busquedas.facadeGeneralPuertasRemote.getValidaIncicenciaOper(jtxt_operador.getText(), this.fecha);
              if(!resp.equals(""))
               {
                    new jdlg_advertencia(resp,"","¡Operador con Incidencias!").setVisible(true);
                    operAsig = false;
                    jtxt_operador.selectAll();
                    jtxt_operador.requestFocus();
                    return;
               }

         if(ocupados<ocupacionSusutituir)
         {
              jdlg_pregunta_SN psn =  new jdlg_pregunta_SN("Asientos insuficientes", "El autobus no tiene suficientes asientos. ¿Desea asignar aún asi el autobus?");
              psn.setVisible(true);
              if(respuestaSN)
              {
                this.setAsignado(true);
                this.dispose();
              }
              else
                  {
                    busAsig = false;
                    jtxt_autobus.selectAll();
                    jtxt_autobus.requestFocus();
                     return;
                  }
                  
         }
         else
         {
             this.setAsignado(true);
                this.dispose();
         }
             
        }
    }
        
    
    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
// TODO add your handling code here:
    }//GEN-LAST:event_formKeyPressed
    
    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new jdlg_Asignar_Op_Bus();
//            }
//        });
//    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JComboBox jcmbx_empresas;
    private javax.swing.JLabel jlbl_barraEstado;
    private javax.swing.JTextField jtxt_autobus;
    private javax.swing.JTextField jtxt_nombreOperador;
    private javax.swing.JTextField jtxt_operador;
    // End of variables declaration//GEN-END:variables

    private TmsPuertasManagedBean busquedas;

    public long getBusId() {
        return busId;
    }

    public void setBusId(long busId) {
        this.busId = busId;
    }

    public String getBusNumero() {
        return busNumero;
    }

    public void setBusNumero(String busNumero) {
        this.busNumero = busNumero;
    }

    public long getOperadorId() {
        return operadorId;
    }

    public void setOperadorId(long operadorId) {
        this.operadorId = operadorId;
    }

    public String getOperadorCalve() {
        return operadorCalve;
    }

    public void setOperadorCalve(String operadorCalve) {
        this.operadorCalve = operadorCalve;
    }

    public String getEmpresa() {
        return this.jcmbx_empresas.getSelectedItem().toString();
    }
    
    public boolean isAsignado() {
        return asignado;
    }

    public void setAsignado(boolean asignado) {
        this.asignado = asignado;
    }
    
    public void setVerOperador(String oper, String empresa){
           Vector vop= busquedas.facadeGeneralPuertasRemote.buscaOperadorPorClaveParaAsignar(oper, empresa);
           if(vop.size()>0)
           {
              Vector op = (Vector) vop.get(0);
              jtxt_nombreOperador.setText(op.get(1).toString());
              jtxt_operador.setText(oper);
              this.setOperadorId(Long.valueOf(op.get(0).toString()));
              this.setOperadorCalve(jtxt_operador.getText());
           }
        
    }
    
    public void setVerAutobus(String autobus, String empresa){
          Vector vbus = busquedas.facadeGeneralPuertasRemote.buscaBusPorNumeroParaAsignar(autobus,empresa);
             if(vbus.size()>0)
               {
                 Vector bus= (Vector) vbus.get(0);
                 jtxt_autobus.setText(autobus);
                 this.setBusId(Long.valueOf(bus.get(0).toString()));
                 this.setBusNumero(jtxt_autobus.getText());
                 if(bus.get(1)!=null){
                     this.setOperadorCalve(bus.get(1).toString());
                     this.setOperadorId(Long.valueOf(bus.get(2).toString()));
                     jtxt_operador.setText(bus.get(1).toString());
                     jtxt_nombreOperador.setText(bus.get(3).toString());
                 }
                     this.setPlantillaId(Long.valueOf(bus.get(4).toString()));
                     this.setPlantilla(bus.get(5).toString());
                     this.ocupados = Long.valueOf(bus.get(6).toString());
               }
    }

    public void setverEmpresa(String empre){
     this.jcmbx_empresas.setSelectedItem(empre);    
    }
    
////// verifica si hay conexion con la BD ///////
public boolean abreSocketAS(){
        Socket s = null;
        try {
            s = new Socket(this.ipAS, this.portAS);
            return true;
        }catch( IOException e ) {
            return false;
        }catch(Exception err){
            return false;
   }
}

    public String getPlantilla() {
        return plantilla;
    }

    public void setPlantilla(String plantilla) {
        this.plantilla = plantilla;
    }

    public long getPlantillaId() {
        return plantillaId;
    }

    public void setPlantillaId(long plantillaId) {
        this.plantillaId = plantillaId;
    }

class jdlg_pregunta_SN extends javax.swing.JDialog {
    
    /**
     * Creates new form jdlg_pregunta_SN
     */
    public jdlg_pregunta_SN(String titulo, String pregunta){
        this.setTitle(titulo);
        this.setModal(true);
        this.setDefaultLookAndFeelDecorated(true);
        this.setUndecorated(true);
        this.getRootPane().setWindowDecorationStyle(JRootPane.QUESTION_DIALOG);
        this.setAlwaysOnTop(true);
        initComponents();
        //this.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);        
        this.setResizable(false);
        jlbl_mensaje.setText(pregunta);
        jlbl_barraEstado.setText("<html>  <font color=FF0000>ENTER: </font> Si                 <font color=FF0000>             ESC: </font> No  </html>");
        jlbl_barraEstado.setHorizontalAlignment( JTextField.CENTER );
        int nletras = pregunta.length();
        this.setSize((nletras * 6) + 80,150);
            Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
            Dimension DilaogSize = this.getSize();
            if (DilaogSize.height > screenSize.height) {
                DilaogSize.height = screenSize.height;
            }
            if (DilaogSize.width > screenSize.width) {
                DilaogSize.width = screenSize.width;
            }
            this.setLocation( ( screenSize.width - DilaogSize.width ) / 2, ( screenSize.height - DilaogSize.height ) / 2 );            this.setDefaultLookAndFeelDecorated(true);
            //this.setUndecorated(true);
            this.getRootPane().setWindowDecorationStyle(JRootPane.QUESTION_DIALOG);
            jlbl_mensaje.requestFocus();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">                          
    private void initComponents() {
        jLabel1 = new javax.swing.JLabel();
        jlbl_barraEstado = new javax.swing.JLabel();
        jlbl_mensaje = new javax.swing.JLabel();
        jlbl_mensaje.setFocusTraversalKeysEnabled(false);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jLabel1.setIcon(new javax.swing.ImageIcon("C:\\NetBeansProyects\\TMSRecaudacion\\TMSRecaudacion-app-client\\src\\java\\tmsrecaudacion\\images\\pregunta.gif"));

        jlbl_barraEstado.setFont(new java.awt.Font("Tahoma", 1, 12));
        jlbl_barraEstado.setForeground(new java.awt.Color(0, 0, 0));
        jlbl_barraEstado.setText(" ENTER: Si                ESC: No");
        jlbl_barraEstado.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jlbl_mensaje.setFont(new java.awt.Font("Arial", 1, 12));
        jlbl_mensaje.setText("sdfsdsdfsdfsdfsdfsdf");
        jlbl_mensaje.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jlbl_mensajeKeyPressed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .add(14, 14, 14)
                .add(jlbl_mensaje, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
                .add(424, 424, 424))
            .add(jlbl_barraEstado, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(21, 21, 21)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 42, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jlbl_mensaje))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 59, Short.MAX_VALUE)
                .add(jlbl_barraEstado, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 27, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        pack();
    }// </editor-fold>                           

    private void jlbl_mensajeKeyPressed(java.awt.event.KeyEvent evt) {                                        
      if(evt.getKeyCode() == evt.VK_ESCAPE)
      {
          respuestaSN = false;
          this.dispose();
      }
      if(evt.getKeyCode() == evt.VK_ENTER)
      {
          respuestaSN = true;
          this.dispose();
      }
      
    }                                       
    
    // Variables declaration - do not modify                     
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jlbl_barraEstado;
    private javax.swing.JLabel jlbl_mensaje;
    
    // End of variables declaration                   
    
}    
}
