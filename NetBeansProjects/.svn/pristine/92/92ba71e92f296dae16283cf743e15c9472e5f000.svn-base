/*
 * JDlgSustitucion.java
 *
 * Created on 9 de octubre de 2007, 06:15 PM
 */

package tms_asigsust;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.text.SimpleDateFormat;
import javax.swing.JComponent;
import javax.swing.KeyStroke;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import tms_psd.*;
import tms_psd.util.BarraMensajes;
import tms_psd.util.JDlgAceptar;
import xertms.entidad.TmsOpcionesSustAutobusV;

/**
 *
 * @author  ocruz
 */
public class JDlgSustitucion extends javax.swing.JDialog implements KeyListener{
    
    /**
     * Creates new form JDlgSustitucion
     */
    public JDlgSustitucion(SesionVenta pSesionVenta, int pFilaCorrida, String edoActual, String edoProx, String pNumEco, String pFlotillaAutobus) {
        inicioGral = true;
        this.filaCorrida = pFilaCorrida;
        this.sesionVenta = pSesionVenta;
        initComponents();
        this.setModal(true);
        centrarJDialog();
        jTxtEco.setText(pNumEco);
        flotillaSustituto = pFlotillaAutobus;
        jTxtFlotilla.setText(flotillaSustituto);
        jTxtEdo.setText(edoActual);
        jTxtProxAsigna.setText(edoProx);
        jTxtEspBus.setEnabled(false);
        this.jTblDetalle.registerKeyboardAction(new ActionListener() { 
        public void actionPerformed(ActionEvent e) { ; }}, KeyStroke.getKeyStroke(KeyEvent.VK_F10, 0), JComponent.WHEN_FOCUSED);
        
        xxxBusSust = sesionVenta.calcSust(jTxtFlotilla.getText());
        if(xxxBusSust==null){
            DialogoAceptar = new JDlgAceptar("¡No hay autobuses disponibles!", "Presione ENTER para continuar...", Color.RED);
            inicioGral=false;
            return;
        }
        copiaEstructura();
        transaccion = OPCSUST;
        jLblBarraEstado.setText(barraMensajes.getMsgSust(3));
        xDetalle.setDataVector(busSust, detalle);
        AnchoColumnasDetalle();
        jTblDetalle.setRowSelectionInterval(0,0);
        jTblDetalle.setColumnSelectionInterval(0,0);
        jTxtEspBus.setEnabled(true);
        //jTblDetalle.requestFocusInWindow();
    }
    
    public boolean getInicioGral(){ return inicioGral; }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        grupo = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLblBarraEstado = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jTxtEco = new javax.swing.JTextField();
        jTxtEco.addKeyListener(this);
        jTxtEco.setFocusTraversalKeysEnabled(false);
        jLabel3 = new javax.swing.JLabel();
        jTxtFlotilla = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTxtEdo = new javax.swing.JTextField();
        jTxtEdo.addKeyListener(this);
        jTxtEdo.setFocusTraversalKeysEnabled(false);
        jLabel6 = new javax.swing.JLabel();
        jTxtProxAsigna = new javax.swing.JTextField();
        jTxtProxAsigna.addKeyListener(this);
        jTxtProxAsigna.setFocusTraversalKeysEnabled(false);
        jPanel3 = new javax.swing.JPanel();
        jScpDetalle = new javax.swing.JScrollPane();
        jTblDetalle = new javax.swing.JTable();
        jTblDetalle.addKeyListener(this);
        jTblDetalle.setFocusTraversalKeysEnabled(false);
        jLabel7 = new javax.swing.JLabel();
        jCboUbicacion = new javax.swing.JComboBox(sesionVenta.getVectorUbicacion());
        jCboUbicacion.addKeyListener(this);
        jCboUbicacion.setFocusTraversalKeysEnabled(false);
        jLabel8 = new javax.swing.JLabel();
        jCboCausa = new javax.swing.JComboBox(sesionVenta.getVectorCausa());
        jCboCausa.addKeyListener(this);
        jCboCausa.setFocusTraversalKeysEnabled(false);
        jLabel9 = new javax.swing.JLabel();
        jRdbUno = new javax.swing.JRadioButton();
        jRdbUno.addKeyListener(this);
        jRdbUno.setFocusTraversalKeysEnabled(false);
        jRdbDos = new javax.swing.JRadioButton();
        jRdbDos.addKeyListener(this);
        jRdbDos.setFocusTraversalKeysEnabled(false);
        jRdbTres = new javax.swing.JRadioButton();
        jRdbTres.addKeyListener(this);
        jRdbTres.setFocusTraversalKeysEnabled(false);
        jLabel1 = new javax.swing.JLabel();
        jTxtEspBus = new javax.swing.JTextField();
        jTxtEspBus.addKeyListener(this);
        jTxtEspBus.setFocusTraversalKeysEnabled(false);

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle(" Sustitucion de Autobus");
        setResizable(false);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.addKeyListener(this);
        jLblBarraEstado.setFont(new java.awt.Font("Tahoma", 1, 10));
        jLblBarraEstado.setText("<html><font color=ff0000>F10</font> Buscar Autobus Sustituto | <font color=ff0000>F11</font> Sustituir | Opciones: <font color=ff0000>Alt+S</font> Siguiente Corrida| <font color=ff0000>Alt+D</font> Todo el Dia | <font color=ff0000>Alt+R</font> Todo el Rol | <font color=ff0000>ENTER</font> Aceptar | <font color=ff0000>ESC</font> Cancelar</html>");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Autobus a sustituir", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11), java.awt.Color.black));
        jPanel2.addKeyListener(this);
        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel2.setText("Numero economico:");

        jTxtEco.setEditable(false);
        jTxtEco.setFont(new java.awt.Font("Tahoma", 1, 11));
        jTxtEco.setName("0");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel3.setText("Flotilla:");

        jTxtFlotilla.setEditable(false);
        jTxtFlotilla.setFont(new java.awt.Font("Tahoma", 1, 11));
        jTxtFlotilla.setFocusable(false);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel4.setText("Estado Actual:");

        jTxtEdo.setEditable(false);
        jTxtEdo.setFont(new java.awt.Font("Tahoma", 1, 11));
        jTxtEdo.setName("1");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel6.setText("Proxima Asignacion:");

        jTxtProxAsigna.setEditable(false);
        jTxtProxAsigna.setFont(new java.awt.Font("Tahoma", 1, 11));
        jTxtProxAsigna.setName("2");

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel6)
                    .add(jLabel4)
                    .add(jLabel2))
                .add(4, 4, 4)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jTxtEco, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 51, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(12, 12, 12)
                        .add(jLabel3)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jTxtFlotilla, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 228, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(145, Short.MAX_VALUE))
                    .add(jTxtProxAsigna, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)
                    .add(jTxtEdo, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(jLabel3)
                    .add(jTxtFlotilla, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jTxtEco, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(jTxtEdo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel6)
                    .add(jTxtProxAsigna, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jScpDetalle.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Opciones de Sustitucion", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11), java.awt.Color.black));
        jTblDetalle.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTblDetalle.setModel(xDetalle);
        jTblDetalle.setName("3");
        jScpDetalle.setViewportView(jTblDetalle);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel7.setText("Ubicacion:");

        jCboUbicacion.setFont(new java.awt.Font("Tahoma", 1, 11));
        jCboUbicacion.setName("7");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel8.setText("Causa:");

        jCboCausa.setFont(new java.awt.Font("Tahoma", 1, 11));
        jCboCausa.setName("8");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel9.setText("Sustituir por:");

        grupo.add(jRdbUno);
        jRdbUno.setFont(new java.awt.Font("Tahoma", 1, 11));
        jRdbUno.setText("Siguiente corrida");
        jRdbUno.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jRdbUno.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jRdbUno.setName("4");

        grupo.add(jRdbDos);
        jRdbDos.setFont(new java.awt.Font("Tahoma", 1, 11));
        jRdbDos.setText("Todo el dia");
        jRdbDos.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jRdbDos.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jRdbDos.setName("5");

        grupo.add(jRdbTres);
        jRdbTres.setFont(new java.awt.Font("Tahoma", 1, 11));
        jRdbTres.setText("Todo el rol");
        jRdbTres.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jRdbTres.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jRdbTres.setName("6");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel1.setText("Especificar Autobus:");

        jTxtEspBus.setFont(new java.awt.Font("Tahoma", 1, 11));
        jTxtEspBus.setName("69");

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel7)
                    .add(jLabel9))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(jCboUbicacion, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 126, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(12, 12, 12)
                        .add(jLabel8)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jCboCausa, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 131, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(jRdbUno)
                        .add(25, 25, 25)
                        .add(jRdbDos)
                        .add(27, 27, 27)
                        .add(jRdbTres)))
                .addContainerGap(206, Short.MAX_VALUE))
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jTxtEspBus, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 110, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(377, Short.MAX_VALUE))
            .add(jScpDetalle, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 614, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(jTxtEspBus, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScpDetalle, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel9)
                    .add(jRdbUno)
                    .add(jRdbDos)
                    .add(jRdbTres))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel7)
                    .add(jCboUbicacion, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel8)
                    .add(jCboCausa, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jLblBarraEstado, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 634, Short.MAX_VALUE)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(11, 11, 11)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLblBarraEstado, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
// TODO add your handling code here:
        operacionRealizada=0;
        //transaccion = INICIO;
        //jLblBarraEstado.setText(barraMensajes.getMsgSust(0));
        jRdbUno.setSelected(true);
        //xDetalle.setDataVector(null, detalle);
        //AnchoColumnasDetalle();
        //jTblDetalle.requestFocusInWindow();
        jTxtEspBus.requestFocusInWindow();
    }//GEN-LAST:event_formComponentShown

    private void centrarJDialog(){
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension frameSize = this.getSize();
        if (frameSize.height > screenSize.height) {
            frameSize.height = screenSize.height;
        }
        if (frameSize.width > screenSize.width) {
            frameSize.width = screenSize.width;
        }
        this.setLocation( ( screenSize.width - frameSize.width ) / 2, ( screenSize.height - frameSize.height ) / 2 );
    }
    
    public void keyTyped(KeyEvent e) {
    }

    public void keyPressed(KeyEvent e) {
        if(e.getComponent().getName()==null) return;
        int nCompo = Integer.valueOf(e.getComponent().getName());
        switch(e.getKeyCode()){
            case KeyEvent.VK_ENTER:
                switch(nCompo){
                    case 69:
                        if(jTblDetalle.getRowCount()<1) return;
                        if(jTxtEspBus.getText().equals(""))
                            copiaEstructura();
                        else{
                            if(!buscarNumeroEconomico(jTxtEspBus.getText()))
                                DialogoAceptar = new JDlgAceptar("¡No se encontro el autobus!", "Se mostrara el listado completo.", Color.RED);
                        }
                        jTxtEspBus.setEnabled(false); 
                        jLblBarraEstado.setText(barraMensajes.getMsgSust(1));
                        transaccion = OPCSUST;
                        xDetalle.setDataVector(busSust, detalle);
                        AnchoColumnasDetalle();
                        jTblDetalle.setRowSelectionInterval(0,0);
                        jTblDetalle.setColumnSelectionInterval(0,0);
                        jTblDetalle.requestFocusInWindow();
                        break;
                    case 3:
                        if(jTblDetalle.getRowCount()<1) return;
                        jTxtEspBus.setEnabled(true);
                        jLblBarraEstado.setText(barraMensajes.getMsgSust(3));
                        jTblDetalle.setRowSelectionInterval(0,0);
                        jTblDetalle.setColumnSelectionInterval(0,0);
                        e.consume();
                        jTxtEspBus.selectAll();
                        jTxtEspBus.requestFocusInWindow();
                        break;
                }
                break;
            case KeyEvent.VK_F11:
                if(transaccion != OPCSUST) return;
                if(jTxtFlotilla.getText().equals("") && !jRdbUno.isSelected()){
                    DialogoAceptar = new JDlgAceptar("¡No hay asignacion original de autobus!", "Solo aplica sustitucion para siguiente corrida.", Color.RED);
                    return;
                }
                int opcionSust=0;
                if(!jRdbUno.isSelected()){
                    if(!jRdbDos.isSelected()) opcionSust = 2;
                    else opcionSust = 1;
                }
                long plantillaId = sesionVenta.obtieneAutobusPlantilla(sesionVenta.getTmsOpcionesSustAutobusV().get(jTblDetalle.getSelectedRow()).getNumeroEconomico());
                switch((int)plantillaId){
                    case -5:DialogoAceptar = new JDlgAceptar("¡No existe conexion a la base de datos!", "Contacte al administrador del sistema.", Color.RED);
                            this.dispose();
                    break;
                    case -1:DialogoAceptar = new JDlgAceptar("¡Error de configuracion!", "El autobus no tiene relacionada una plantilla.", Color.RED);
                            this.dispose();
                    break;
                }
                // validar ocupacion - disponibilidad
                int filaOpciones=obtieneIndiceReal(jTblDetalle.getValueAt(jTblDetalle.getSelectedRow(), 0).toString());
                int res=validaCapacidadAsientosOcupadosDisponibles(filaCorrida, sesionVenta.getTmsOpcionesSustAutobusV().get(filaOpciones).getNumeroEconomico(), sesionVenta.getTmsMonitorCorridaV().get(filaCorrida).getClaveCorrida());
                if(res==-1){ operacionRealizada=0; this.dispose(); return; }
                if(res==0) return;

                if(sesionVenta.getTmsOpcionesSustAutobusV().get(filaOpciones).getEmpresaNombre() == null){
                    this.empresaId = sesionVenta.getTmsMonitorCorridaV().get(filaCorrida).getEmpresaId();
                    this.empresa = sesionVenta.getTmsMonitorCorridaV().get(filaCorrida).getEmpresa();
                }
                else{
                    this.empresaId = sesionVenta.getTmsOpcionesSustAutobusV().get(filaOpciones).getEmpresaId();
                    this.empresa = sesionVenta.getTmsOpcionesSustAutobusV().get(filaOpciones).getEmpresaNombre();
                    if(!sesionVenta.validaServicioEmpresa(sesionVenta.getTmsMonitorCorridaV().get(filaCorrida).getServicio(), sesionVenta.getTmsMonitorCorridaV().get(filaCorrida).getRutaId(), this.empresa)){
                        DialogoAceptar = new JDlgAceptar("Sustitucion de Autobus.","El servicio, ruta y empresa de esta corrida no corresponden.", Color.RED);
                        return;
                    }
                }
                
                if(jTxtFlotilla.getText().equals("")){
                    System.out.println("sust1 ");
                    this.regSust=sesionVenta.sustituyeAutobusNull(sesionVenta.getTmsMonitorCorridaV().get(filaCorrida).getCorridaId(),
                                sesionVenta.getTmsOpcionesSustAutobusV().get(filaOpciones).getAutobusId(),
                                sesionVenta.getTmsOpcionesSustAutobusV().get(filaOpciones).getNumeroEconomico(),
                                sesionVenta.getTmsMonitorCorridaV().get(filaCorrida).getFechaHoraCorrida(), plantillaId,
                                this.empresaId, this.empresa);
                }
                else{
                    this.regSust=sesionVenta.sustituyeAutobus(sesionVenta.getTmsMonitorCorridaV().get(filaCorrida).getCorridaId(),
                                    sesionVenta.getTmsMonitorCorridaV().get(filaCorrida).getAutobusOriginalId(),
                                    sesionVenta.getTmsMonitorCorridaV().get(filaCorrida).getAutobusOriginal(),
                                    sesionVenta.getTmsOpcionesSustAutobusV().get(filaOpciones).getAutobusId(),
                                    sesionVenta.getTmsOpcionesSustAutobusV().get(filaOpciones).getNumeroEconomico(),
                                    sesionVenta.getTmsMonitorCorridaV().get(filaCorrida).getFechaHoraCorrida(),
                                    opcionSust, plantillaId,
                                    this.empresaId, this.empresa);
                }
                if(this.regSust==-69){
                    DialogoAceptar = new JDlgAceptar("TMS PSD.", "Registro ocupado.", Color.RED);
                    this.dispose();
                    return;
                }
                if(this.regSust==-1)
                    DialogoAceptar = new JDlgAceptar("¡No fue posible sustituir el autobus!", "Contacte al administrador del sistema.", Color.RED);
                else{
                    boolean bandera=true;
                    if(!jTxtFlotilla.getText().equals("")){
                       bandera=sesionVenta.registraFueraRolAutobusOrig(sesionVenta.getTmsMonitorCorridaV().get(filaCorrida).getAutobusOriginalId(),
                            jCboUbicacion.getSelectedItem().toString(), jCboCausa.getSelectedItem().toString());
                    }
                    if(!bandera)
                        DialogoAceptar = new JDlgAceptar("¡No fue posible cambiar el estado del autobus original!", "Contacte al administrador del sistema.", Color.RED);
                    else{
                        if(!sesionVenta.registraEnRolAutobusSust(sesionVenta.getTmsOpcionesSustAutobusV().get(filaOpciones).getAutobusId()))
                            DialogoAceptar = new JDlgAceptar("¡No fue posible cambiar el estado del autobus sustituto!", "Contacte al administrador del sistema.", Color.RED);
                        else{
                            this.NumeroEconomicoSust = sesionVenta.getTmsOpcionesSustAutobusV().get(filaOpciones).getNumeroEconomico();
                            this.NumeroEconomicoSustId = sesionVenta.getTmsOpcionesSustAutobusV().get(filaOpciones).getAutobusId();
                            this.flotillaId = sesionVenta.getTmsOpcionesSustAutobusV().get(filaOpciones).getFlotillaId();
                            this.flotilla = sesionVenta.getTmsOpcionesSustAutobusV().get(filaOpciones).getNombreFlotilla();
                            operacionRealizada=2; // autobus sust
                            DialogoAceptar = new JDlgAceptar("¡Sustitucion realizada correctamente!", "Presione ENTER para continuar...", colorDialogoActivo);
                        }
                    }
                }
                this.dispose();
                return;
            case KeyEvent.VK_ESCAPE:
                this.operacionRealizada=0; this.dispose(); return;
            case KeyEvent.VK_LEFT:
                if(transaccion != OPCSUST) return;
                switch(nCompo){
                    case 3: jCboCausa.requestFocusInWindow(); break;
                    case 4: jTblDetalle.requestFocusInWindow(); break;
                    case 5: jRdbUno.requestFocusInWindow(); break;
                    case 6: jRdbDos.requestFocusInWindow(); break;
                    case 7: jRdbTres.requestFocusInWindow(); break;
                    case 8: jCboUbicacion.requestFocusInWindow(); break;
                }
            break;
            case KeyEvent.VK_RIGHT:
                if(transaccion != OPCSUST) return;
                switch(nCompo){
                    case 7: jCboCausa.requestFocusInWindow(); break;
                    case 8: jTblDetalle.requestFocusInWindow(); break;
                    case 3: jRdbUno.requestFocusInWindow(); break;
                    case 4: jRdbDos.requestFocusInWindow(); break;
                    case 5: jRdbTres.requestFocusInWindow(); break;
                    case 6: jCboUbicacion.requestFocusInWindow(); break;
                }
            break;
            case KeyEvent.VK_S:
                if(transaccion != OPCSUST) return;
                if(!e.isAltDown()) return;
                jRdbUno.setSelected(true);
                jRdbUno.requestFocusInWindow();
            break;
            case KeyEvent.VK_D:
                if(transaccion != OPCSUST) return;
                if(!e.isAltDown()) return;
                if(jTxtFlotilla.getText().equals("")){
                    DialogoAceptar = new JDlgAceptar("¡No hay asignacion original de autobus!", "Solo aplica sustitucion para siguiente corrida.", Color.RED);
                    return;
                }
                jRdbDos.setSelected(true);
                jRdbDos.requestFocusInWindow();
            break;
            case KeyEvent.VK_R:
                if(transaccion != OPCSUST) return;
                if(!e.isAltDown()) return;
                if(jTxtFlotilla.getText().equals("")){
                    DialogoAceptar = new JDlgAceptar("¡No hay asignacion original de autobus!", "Solo aplica sustitucion para siguiente corrida.", Color.RED);
                    return;
                }
                jRdbTres.setSelected(true);
                jRdbTres.requestFocusInWindow();
            break;
        }
    }

    private int obtieneIndiceReal(String string) {
        TmsOpcionesSustAutobusV zz = null;
        for(int i=0; i<sesionVenta.getTmsOpcionesSustAutobusV().size(); i++){
            zz = sesionVenta.getTmsOpcionesSustAutobusV().get(i);
            if(zz.getNumeroEconomico().equals(string)){
                return i;
            }
        }
        return -1;
    }
    
    public void keyReleased(KeyEvent e) {
    }

    private void AnchoColumnasDetalle(){
        TableColumn column = null;
        int anchoContenedor = jScpDetalle.getWidth();
        for (int i = 0; i < 4; i++) {
            column = jTblDetalle.getColumnModel().getColumn(i);
            switch(i){
//"Autobus", "Flotilla", "Estado", "Proxima Asignacion"
                case 0:  column.setPreferredWidth(Math.round(anchoContenedor*(float)0.08)); break;
                case 1:  column.setPreferredWidth(Math.round(anchoContenedor*(float)0.24)); break;
                case 2:  column.setPreferredWidth(Math.round(anchoContenedor*(float)0.34)); break;
                case 3:  column.setPreferredWidth(Math.round(anchoContenedor*(float)0.34)); break;
            }
            column.setResizable(false);
        }
    }
    
    public int getResultado(){ return this.operacionRealizada; }
    
    public String getNumeroEconomicoSust(){ return this.NumeroEconomicoSust; }
    
    public long getNumeroEconomicoSustId(){ return this.NumeroEconomicoSustId; }
    
    public long getFlotillaId(){ return this.flotillaId; }
    
    public String getFlotilla(){ return this.flotilla; }
    
    public String getEmpresa(){ return this.empresa; }
    
    public int getRegSust(){ return this.regSust; }

    private int validaCapacidadAsientosOcupadosDisponibles(int fSel, String numeroEco, String claveCorrida) {
        int ocuCorrida = sesionVenta.getOcupacion(fSel);
        if(ocuCorrida==-1){
            DialogoAceptar = new JDlgAceptar("¡Esta corrida no es valida!", "Posiblemente la corrida ya no esta abierta.", Color.RED);
            return -1;
        }
        int ocuAutobusNuevo = sesionVenta.getCapacidadAsientosAutobus(numeroEco);
        if(ocuAutobusNuevo==-1){
            DialogoAceptar = new JDlgAceptar("¡Configuracion de autobus incorrecta!", "No es posible determinar su capacidad de asientos.", Color.RED);
            return 0;
        }
        
        if(ocuCorrida>ocuAutobusNuevo){
            DialogoAceptar = new JDlgAceptar("¡Asientos insuficientes!", "El autobus seleccionado no cuenta con suficientes asientos.", Color.RED);
            return 0;
        }
        
        int maxAsientoOcu = sesionVenta.maxAsientoOcupado(claveCorrida);
        System.out.println(claveCorrida+" - - - "+maxAsientoOcu+" - - - "+ocuAutobusNuevo+" --- "+numeroEco+" ---"+fSel);
        if(maxAsientoOcu>ocuAutobusNuevo){
            DialogoAceptar = new JDlgAceptar("¡Asientos finales ocupados!", "<html>La corrida cuenta con asientos finales ocupados y la numeracion<br>de asientos del autobus seleccionado no los contiene.</html>", Color.RED);
            return 0;
        }
        
        return 1;
    }

    private boolean buscarNumeroEconomico(String nEco) {
        int i,j;
        for(i=0; i<xxxBusSust.length; i++){
            if(xxxBusSust[i][0].toString().equals(nEco)){
                busSust = new Object[1][4];
                for(j=0; j<4; j++)
                    busSust[0][j] = xxxBusSust[i][j];
                return true;
            }
        }
        copiaEstructura();
        return false;
    }

    private void copiaEstructura() {
        int i,j;
        busSust = new Object[xxxBusSust.length][4];
        for(i=0; i<xxxBusSust.length; i++)
            for(j=0; j<4; j++)
                busSust[i][j] = xxxBusSust[i][j];
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup grupo;
    private javax.swing.JComboBox jCboCausa;
    private javax.swing.JComboBox jCboUbicacion;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLblBarraEstado;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JRadioButton jRdbDos;
    private javax.swing.JRadioButton jRdbTres;
    private javax.swing.JRadioButton jRdbUno;
    private javax.swing.JScrollPane jScpDetalle;
    private javax.swing.JTable jTblDetalle;
    private javax.swing.JTextField jTxtEco;
    private javax.swing.JTextField jTxtEdo;
    private javax.swing.JTextField jTxtEspBus;
    private javax.swing.JTextField jTxtFlotilla;
    private javax.swing.JTextField jTxtProxAsigna;
    // End of variables declaration//GEN-END:variables
    private SimpleDateFormat formatoHora= new SimpleDateFormat("HH:mm");
    private JDlgAceptar DialogoAceptar;
    private Object[] detalle = {"Autobus", "Flotilla", "Estado", "Proxima Asignacion"};
    private DefaultTableModel xDetalle = new DefaultTableModel(null, detalle){
            public boolean isCellEditable(int row, int col) {
                return false;
            }   
    };
    private int operacionRealizada = 0;
    private SesionVenta sesionVenta = null;
    private int filaCorrida;
    private Object[][] busSust = null;
    private Object[][] xxxBusSust = null;
    private static int INICIO = 0;
    private static int OPCSUST = 1;
    private static int NOOPCSUST = 2;
    private int transaccion;
    private BarraMensajes barraMensajes = new BarraMensajes();
    private Color colorDialogoActivo = new Color(0,83,255);
    private String NumeroEconomicoSust="";
    private long NumeroEconomicoSustId;
    private int regSust =-1;
    private String flotilla;
    private long flotillaId;
    private long empresaId;
    private String empresa;
    private String flotillaSustituto;
    private boolean inicioGral;
}