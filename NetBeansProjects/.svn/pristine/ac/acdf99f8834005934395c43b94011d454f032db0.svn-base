/*
 * jdlg_ComprobarGatos.java
 *
 * Created on 4 de noviembre de 2007, 01:20 PM
 */

package tmsrecaudacion;

import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author  vgonzalez
 */
public class jdlg_ComprobarGatos extends javax.swing.JDialog {
    
    /** Creates new form jdlg_ComprobarGatos */
    public jdlg_ComprobarGatos(Vector pvgastos,Double panticipos){//java.awt.Frame parent, boolean modal) {
        this.vgastos = pvgastos;
        this.anticipos = panticipos;
        //super(parent, modal);
        initComponents();
        listaconceptos.removeAllItems();
        for(int i=0; i<vgastos.size();i++)
            listaconceptos.addItem(vgastos.get(i).toString());
        Tablagastos.setModel(defaultmodelo);
        defaultmodelo.addColumn("Concepto");
        defaultmodelo.addColumn("%");
        defaultmodelo.addColumn("Subtotal");
        defaultmodelo.addColumn("Impuesto");
        defaultmodelo.addColumn("Total");
        reziseColumnas();
        jtxt_totalanticipos.setText(""+anticipos);
        totalanticipos = anticipos;
        jlbl_barraEstado.setText("<html>  <font color=FF0000>   ESCAPE</font> Salir| <font color=FF0000>« »</font> Moverse entre Campos | <font color=FF0000>INSERT</font> Agregar Comprobación | <font color=FF0000>SUPR</font> Eliminar Comprobación | <font color=FF0000>F9</font> Registrar Comprobaciones  </html>");        
        jbtxt_cantidad.requestFocus();
    }
    
    private void reziseColumnas(){
                TableColumn column = new TableColumn();
                int n =200;
                column = Tablagastos.getColumnModel().getColumn(0);
                column.setResizable(false);
                column.setMinWidth( n );
                column.setMaxWidth( n );
                column.setPreferredWidth( n );
                column.setResizable( false );
                n = 30;
                column = Tablagastos.getColumnModel().getColumn(1);
                column.setResizable(false);
                column.setMinWidth( n );
                column.setMaxWidth( n );
                column.setPreferredWidth( n );
                column.setResizable( false );
                n = 70;
                column = Tablagastos.getColumnModel().getColumn(2);
                column.setResizable(false);
                column.setMinWidth( n );
                column.setMaxWidth( n );
                column.setPreferredWidth( n );
                column.setResizable( false );
                column = Tablagastos.getColumnModel().getColumn(3);
                column.setResizable(false);
                column.setMinWidth( n );
                column.setMaxWidth( n );
                column.setPreferredWidth( n );
                column.setResizable( false );
                column = Tablagastos.getColumnModel().getColumn(4);
                column.setResizable(false);
                column.setMinWidth( n );
                column.setMaxWidth( n );
                column.setPreferredWidth( n );
                column.setResizable( false );
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jlbl_importe = new javax.swing.JLabel();
        jbtxt_cantidad = new tms_TextFields.JCuantityTextField();
        jLabel2 = new javax.swing.JLabel();
        jcmb_listaimpuesto = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Tablagastos = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jbtxt_totalgastos = new tms_TextFields.JCuantityTextField();
        jLabel5 = new javax.swing.JLabel();
        jtxt_totalanticipos = new tms_TextFields.JCuantityTextField();
        jlbl_barraEstado = new javax.swing.JLabel();
        listaconceptos = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jlbl_importe.setFont(new java.awt.Font("Tahoma", 1, 12));
        jlbl_importe.setText("Importe Total:");
        jlbl_importe.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jlbl_importeFocusGained(evt);
            }
        });
        jlbl_importe.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jlbl_importeKeyPressed(evt);
            }
        });

        jbtxt_cantidad.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jbtxt_cantidad.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jbtxt_cantidadKeyPressed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel2.setText("Impuesto:");

        jcmb_listaimpuesto.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "15", "10", "0" }));
        jcmb_listaimpuesto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jcmb_listaimpuestoKeyPressed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel3.setText("%");

        Tablagastos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5"
            }
        ));
        Tablagastos.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TablagastosFocusGained(evt);
            }
        });
        Tablagastos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TablagastosKeyPressed(evt);
            }
        });

        jScrollPane1.setViewportView(Tablagastos);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel4.setText("Total Gastos:");

        jbtxt_totalgastos.setEditable(false);
        jbtxt_totalgastos.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jbtxt_totalgastos.setText("0.0");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel5.setText("Total Anticipos:");

        jtxt_totalanticipos.setEditable(false);
        jtxt_totalanticipos.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jtxt_totalanticipos.setText("0.0");

        jlbl_barraEstado.setFont(new java.awt.Font("Tahoma", 1, 10));
        jlbl_barraEstado.setText("jLabel6");
        jlbl_barraEstado.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        listaconceptos.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Gastos Comprobables" }));
        listaconceptos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                listaconceptosKeyPressed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(20, 20, 20)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jLabel2)
                            .add(jlbl_importe))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(jbtxt_cantidad, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 69, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(26, 26, 26)
                                .add(listaconceptos, 0, 264, Short.MAX_VALUE))
                            .add(layout.createSequentialGroup()
                                .add(jcmb_listaimpuesto, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 45, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jLabel3))))
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                            .add(jLabel4)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(jbtxt_totalgastos, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 75, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(jLabel5)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(jtxt_totalanticipos, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 75, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 452, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(21, 21, 21))
            .add(jlbl_barraEstado, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 493, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jlbl_importe)
                    .add(jbtxt_cantidad, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(listaconceptos, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(17, 17, 17)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(jcmb_listaimpuesto, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel3))
                .add(18, 18, 18)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 171, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(15, 15, 15)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(jbtxt_totalgastos, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jtxt_totalanticipos, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel5))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 21, Short.MAX_VALUE)
                .add(jlbl_barraEstado, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 44, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TablagastosFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TablagastosFocusGained
        jlbl_barraEstado.setText("<html>  <font color=FF0000>   ESCAPE</font> Salir | <font color=FF0000>SUPR</font> Eliminar Comprobación | <font color=FF0000>F9</font> Registrar Comprobaciones  </html>");                
    }//GEN-LAST:event_TablagastosFocusGained

    private void jlbl_importeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jlbl_importeFocusGained
    jlbl_barraEstado.setText("<html>  <font color=FF0000>   ESCAPE</font> Salir | <font color=FF0000>« »</font> Moverse entre Campos | <font color=FF0000>ENTER</font> Agregar Comprobación | <font color=FF0000>F9</font> Registrar Comprobaciones  </html>");        
    }//GEN-LAST:event_jlbl_importeFocusGained

    private void jlbl_importeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jlbl_importeKeyPressed
        
    }//GEN-LAST:event_jlbl_importeKeyPressed

    private void TablagastosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TablagastosKeyPressed
        if(evt.getKeyCode() == evt.VK_RIGHT || evt.getKeyCode() == evt.VK_TAB)
        {
            jbtxt_cantidad.selectAll();
            jbtxt_cantidad.requestFocus();
        }
        if(evt.getKeyCode() == evt.VK_LEFT)
          jcmb_listaimpuesto.requestFocus();

        if(evt.getKeyCode() == evt.VK_DELETE)
            quitar();   
        
        if(evt.getKeyCode() == evt.VK_F9)
            registrar();

        if(evt.getKeyCode() == evt.VK_ESCAPE)
            this.dispose();
       
    }//GEN-LAST:event_TablagastosKeyPressed

    private void jcmb_listaimpuestoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jcmb_listaimpuestoKeyPressed
        if(evt.getKeyCode() == evt.VK_RIGHT)
    {
        if(Tablagastos.getRowCount()>0)
        {
            Tablagastos.setRowSelectionInterval(0,0);
            Tablagastos.setColumnSelectionInterval(0,0);
            Tablagastos.requestFocus();
        }
        else
        {
            jbtxt_cantidad.selectAll();
            jbtxt_cantidad.requestFocus();
        }
    }
    if(evt.getKeyCode() == evt.VK_LEFT)
        listaconceptos.requestFocus();
    
    if(evt.getKeyCode() == 27)
        agregar();  

    if(evt.getKeyCode() == evt.VK_F9)
            registrar();

        if(evt.getKeyCode() == evt.VK_ESCAPE)
            this.dispose();
    }//GEN-LAST:event_jcmb_listaimpuestoKeyPressed

    private void jbtxt_cantidadKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jbtxt_cantidadKeyPressed
        if(evt.getKeyCode() == evt.VK_LEFT)
        {
        if(Tablagastos.getRowCount()>0)
        {
            Tablagastos.setRowSelectionInterval(0,0);
            Tablagastos.setColumnSelectionInterval(0,0);
            Tablagastos.requestFocus();
        }
        else
            jcmb_listaimpuesto.requestFocus();
        }
           
        if(evt.getKeyCode() == evt.VK_RIGHT)
          listaconceptos.requestFocus();
        
        if(evt.getKeyCode() == evt.VK_ENTER)
            agregar();           
        
        if(evt.getKeyCode() == evt.VK_F9)
            registrar();

        if(evt.getKeyCode() == evt.VK_ESCAPE)
            this.dispose();
        
        
    }//GEN-LAST:event_jbtxt_cantidadKeyPressed

    private void listaconceptosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_listaconceptosKeyPressed
           if(evt.getKeyCode() == evt.VK_LEFT)
               jbtxt_cantidad.requestFocus();
           if(evt.getKeyCode() == evt.VK_RIGHT)
               jcmb_listaimpuesto.requestFocus();
           if(evt.getKeyCode() == evt.VK_ENTER)
               agregar();   
        if(evt.getKeyCode() == evt.VK_F9)
            registrar();
        if(evt.getKeyCode() == evt.VK_ESCAPE)
            this.dispose();
    }//GEN-LAST:event_listaconceptosKeyPressed
     
    private void registrar(){
        System.out.println("Favor: "+favor);
        System.out.println("Contra: "+contra);
        this.dispose();
    }
    
    private void agregar(){
      if (jbtxt_cantidad.getText().equals("") ||(Double.valueOf(jbtxt_cantidad.getText())) <=0)
      {
        new jdlg_error("¡Debes introducir la cantidad","","¡Eror de datos!").setVisible(true);
        listaconceptos.requestFocus();
      }
        else    
        {
            String datos [] = new String [5];
            datos[0]= listaconceptos.getSelectedItem().toString();
            datos[1]= jcmb_listaimpuesto.getSelectedItem().toString();
            try {
            datos[2]= ""+ roundNum(((Float.parseFloat(jbtxt_cantidad.getText())) / (1+((Float.parseFloat(jcmb_listaimpuesto.getSelectedItem().toString()))/100)) ));//roundNum(((Float.parseFloat(jbtxt_cantidad.getText())) -((Float.parseFloat(jbtxt_cantidad.getText()))*(Float.parseFloat(jcmb_listaimpuesto.getSelectedItem().toString()))/100) ));
            datos[3]= ""+roundNum((Float.parseFloat(jbtxt_cantidad.getText()))-( roundNum(((Float.parseFloat(jbtxt_cantidad.getText())) / (1+((Float.parseFloat(jcmb_listaimpuesto.getSelectedItem().toString()))/100)) )) ));//roundNum(((Float.parseFloat(jbtxt_cantidad.getText()))*(Float.parseFloat(jcmb_listaimpuesto.getSelectedItem().toString()))/100)); 
            datos[4]= jbtxt_cantidad.getText();
            } catch (Exception e1) {e1.printStackTrace(); } 
            float tg = (Float.parseFloat(jbtxt_totalgastos.getText())) + (Float.parseFloat(datos[4]));
            try {
                 tg = roundNum(tg);
                } catch (Exception e1) {e1.printStackTrace(); } 

            jbtxt_totalgastos.setText(""+tg);

                if(tg<=totalanticipos)
                {
                 favor = 0;
                  double ta = totalanticipos - tg;
                  contra = ta;
                  
                }
            else 
              {
               contra= 0;
                  double ta = tg - totalanticipos;
                  favor=ta;
              }

               defaultmodelo.addRow(datos);
                jbtxt_cantidad.setText("");
                jbtxt_cantidad.requestFocus();
        }        
    }
    
    private void quitar(){
       if(Tablagastos.getSelectedRow()!=-1)
              {
                   
                  try {
                       float tg = (Float.parseFloat(jbtxt_totalgastos.getText())) - (Float.parseFloat((String) Tablagastos.getValueAt(Tablagastos.getSelectedRow(), 4)));
                       tg = roundNum(tg);
                       jbtxt_totalgastos.setText(""+ tg );
                       if(contra==0)
                       {
                        double vf =  favor;
                        double vq = Double.parseDouble((String) Tablagastos.getValueAt(Tablagastos.getSelectedRow(), 4));
                        double vr = 0;
                        if(vf>vq)
                        {
                         vr = vf -vq;
                         favor = vr; 
                        }
                        else 
                        {
                          if(vf<vq)
                          {
                             vr = vq -vf;
                             favor = 0;
                             contra = vr;
                          } 
                          else 
                          {
                            if(vf==vq){
                                favor=0;
                                contra = totalanticipos;
                             vr =0;    
                            }
                          }
                        }
                       }
                       else 
                         {
                          double vc = contra;
                          contra =   vc + (Double.parseDouble((String) Tablagastos.getValueAt(Tablagastos.getSelectedRow(), 4)));
                       }

                      } catch (Exception e1) {e1.printStackTrace(); } 
                      defaultmodelo.removeRow(Tablagastos.getSelectedRow());
              }        
    }
    
    private void nuevoGasto(){
               jlbl_importe.setEnabled(true);
               jLabel2.setEnabled(true);
               jLabel3.setEnabled(true);
               jLabel4.setEnabled(true);
               jLabel5.setEnabled(true);
               listaconceptos.setEnabled(true);
               jbtxt_cantidad.setEditable(true);
               jcmb_listaimpuesto.setEnabled(true);
               jbtxt_cantidad.setText("");
               Tablagastos.setEnabled(true);
               jlbl_importe.requestFocus();
         }

            public float roundNum(float num) throws Exception{
            float valor = 0;

            valor = num;

            valor = valor*100;
            valor = Math.round(valor);
            valor = valor/100;

            return valor;

            }

            public static double roundNumd(double num) throws Exception{
            double valor = 0;
            valor = num;
            valor = valor*1;
            valor = Math.round(valor);
            valor = valor/1;
            return valor;
            }            
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Tablagastos;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private tms_TextFields.JCuantityTextField jbtxt_cantidad;
    private tms_TextFields.JCuantityTextField jbtxt_totalgastos;
    private javax.swing.JComboBox jcmb_listaimpuesto;
    private javax.swing.JLabel jlbl_barraEstado;
    private javax.swing.JLabel jlbl_importe;
    private tms_TextFields.JCuantityTextField jtxt_totalanticipos;
    private javax.swing.JComboBox listaconceptos;
    // End of variables declaration//GEN-END:variables
    private double totalanticipos = 0;
    private double favor = 0;
    private double contra = 0;
    private DefaultTableModel defaultmodelo = new DefaultTableModel();//defaultmodel();

    private Vector vgastos;

    private Double anticipos;

    
}
