/*
 * JIF_ValidarCodigoBarras.java
 *
 * Created on 26 de diciembre de 2008, 10:55 AM
 */

package tmscodigobarras;

import entidad.TmsBoletosVentaTbl;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JRViewer;
import net.sf.jasperreports.view.JasperViewer;
import solicitud.TMSSesionCodBarRemote;
import tmscodigobarras.clases.SwingWorker;

/**
 *
 * @author  asolis
 */
public class JIF_ValidarCodigoBarras extends javax.swing.JDialog{//javax.swing.JInternalFrame {//
    Context cont = null;
    TMSSesionCodBarRemote cosa = null;
    private KeyEvent eventoTeclado;
    public TmsBoletosVentaTbl nombre = null;
    public String corrida;
    Vector funciones=new Vector();
    String usuario;
    String corridaFH;
    final int capacidad;
    int abordados=0;
    
    /**
     * Creates new form JIF_ValidarCodigoBarras
     */
    public JIF_ValidarCodigoBarras(String corrida, int capacidad, String usuario) {
        System.out.println("entra a JIF_ValidarCodigoBarras...");
        initComponents();
        this.setTitle("Rev. 03.10.2009");
        this.corrida=corrida;
        this.capacidad=capacidad;
        this.usuario=usuario;
        this.setModal(true);
         this.centrarDialogo();
        jLTotal.setText("Capacidad: "+capacidad);
        try {
            cont = new InitialContext(System.getProperties());
            cosa = (TMSSesionCodBarRemote) cont.lookup(TMSSesionCodBarRemote.class.getName());
            //System.out.println(cosa + " "+cont);
        } catch (NamingException ex) {
            ex.printStackTrace();
        }
        System.out.println("manda a llamar getCorridaFH...");
        corridaFH=cosa.getCorridaFH(corrida);
        jlcorrida.setText(corrida +"      "+ corridaFH);
        jtxt_motivo.setVisible(false);
        jlbl_motivo.setVisible(false);
        //jlbl_barraEstado.setText("<html>  <font color=FF0000>   F4</font> Salir de Validar Código de Barras | <font color=FF0000>   ENTER</font> Búsqueda de Boleto | <font color=FF0000>   F3</font> Búsqueda de Boleto por Nombre | <font color=FF0000>   F6</font> Impresión de Boleto de Internet| <font color=FF0000>CTRL+2</font> Minimizar ventana | <font color=FF0000>CTRL+1</font> Mostrar siguiente ventana");
        jlbl_barraEstado.setText("<html>  <font color=FF0000>   ESC</font> Salir de Validar Código de Barras | <font color=FF0000>   ENTER</font> Búsqueda de Boleto | <font color=FF0000>   F3</font> Búsqueda de Boleto por Nombre | <font color=FF0000>   F6</font> Impresión de Boleto de Internet");
        jtxt_codigo.setBackground(new Color(192,190,207));
        jtxt_codigo.requestFocus();
        System.out.println("manda a llamar getFuncionesUsuario...");
        Vector f=cosa.getFuncionesUsuario(usuario);
        for(int i=0; i<f.size(); i++){
            //System.out.println("pos "+i+" "+((Vector)f.get(i)).get(0));
            funciones.add(((Vector)f.get(i)).get(0));
            }
        
etiqueta.setVisible(false);
progressBar.setVisible(false);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        buttonGroup1 = new javax.swing.ButtonGroup();
        jlbl_nombre = new javax.swing.JLabel();
        jlbl_codigo = new javax.swing.JLabel();
        jtxt_nombre = new javax.swing.JTextField();
        jlbl_asiento = new javax.swing.JLabel();
        jtxt_asiento = new javax.swing.JTextField();
        jlbl_corrida = new javax.swing.JLabel();
        jtxt_corrida = new javax.swing.JTextField();
        jlbl_hora = new javax.swing.JLabel();
        jtxt_hora = new javax.swing.JTextField();
        jtxt_operacion = new javax.swing.JTextField();
        jlbl_operacion = new javax.swing.JLabel();
        jtxt_estado = new javax.swing.JTextField();
        jlbl_estado = new javax.swing.JLabel();
        jlbl_barraEstado = new javax.swing.JLabel();
        jtxt_codigo = new javax.swing.JPasswordField();
        jlbl_folio = new javax.swing.JLabel();
        jtxt_folio = new javax.swing.JTextField();
        jlbl_tipopasajero = new javax.swing.JLabel();
        jtxt_tipopasajero = new javax.swing.JTextField();
        jlbl_servicio = new javax.swing.JLabel();
        jtxt_servicio = new javax.swing.JTextField();
        jlbl_motivo = new javax.swing.JLabel();
        jtxt_motivo = new javax.swing.JTextField();
        jlbl_folio_preimpreso = new javax.swing.JLabel();
        jtxt_folio_preimpreso = new tms_TextFields.JNumberTextField();
        jlbl_folio_p = new javax.swing.JLabel();
        jntxt_folio_p = new tms_TextFields.JNumberTextField();
        jLabel1 = new javax.swing.JLabel();
        jtxt_referencia = new tms_TextFields.JTextTextField();
        jLabel2 = new javax.swing.JLabel();
        jlcorrida = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jmodo1 = new javax.swing.JRadioButton();
        jmodo2 = new javax.swing.JRadioButton();
        jlabel = new javax.swing.JLabel();
        jLTotal = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        etiqueta = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });

        jlbl_nombre.setFont(new java.awt.Font("Tahoma", 1, 14));
        jlbl_nombre.setText("Nombre Pasajero:");

        jlbl_codigo.setFont(new java.awt.Font("Tahoma", 1, 14));
        jlbl_codigo.setText("C\u00f3digo de Barras:");

        jtxt_nombre.setEditable(false);
        jtxt_nombre.setFont(new java.awt.Font("Tahoma", 1, 18));
        jtxt_nombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxt_nombreKeyPressed(evt);
            }
        });

        jlbl_asiento.setFont(new java.awt.Font("Tahoma", 1, 14));
        jlbl_asiento.setText("No. Asiento:");

        jtxt_asiento.setEditable(false);
        jtxt_asiento.setFont(new java.awt.Font("Tahoma", 1, 28));
        jtxt_asiento.setForeground(new java.awt.Color(0, 0, 255));
        jtxt_asiento.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtxt_asiento.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxt_asientoKeyPressed(evt);
            }
        });

        jlbl_corrida.setFont(new java.awt.Font("Tahoma", 1, 14));
        jlbl_corrida.setText("Corrida:");

        jtxt_corrida.setEditable(false);
        jtxt_corrida.setFont(new java.awt.Font("Tahoma", 1, 18));
        jtxt_corrida.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtxt_corrida.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxt_corridaKeyPressed(evt);
            }
        });

        jlbl_hora.setFont(new java.awt.Font("Tahoma", 1, 14));
        jlbl_hora.setText("Fecha y Hora:");

        jtxt_hora.setEditable(false);
        jtxt_hora.setFont(new java.awt.Font("Tahoma", 1, 20));
        jtxt_hora.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtxt_hora.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxt_horaKeyPressed(evt);
            }
        });

        jtxt_operacion.setEditable(false);
        jtxt_operacion.setFont(new java.awt.Font("Tahoma", 1, 18));
        jtxt_operacion.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtxt_operacion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxt_operacionKeyPressed(evt);
            }
        });

        jlbl_operacion.setFont(new java.awt.Font("Tahoma", 1, 14));
        jlbl_operacion.setText("Operaci\u00f3n:");

        jtxt_estado.setEditable(false);
        jtxt_estado.setFont(new java.awt.Font("Tahoma", 1, 72));
        jtxt_estado.setForeground(new java.awt.Color(0, 153, 0));
        jtxt_estado.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtxt_estado.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxt_estadoKeyPressed(evt);
            }
        });

        jlbl_estado.setFont(new java.awt.Font("Tahoma", 1, 14));
        jlbl_estado.setText("Estado:");

        jtxt_codigo.setBackground(new java.awt.Color(255, 255, 204));
        jtxt_codigo.setColumns(5);
        jtxt_codigo.setFont(new java.awt.Font("Courier", 0, 22));
        jtxt_codigo.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtxt_codigo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtxt_codigoFocusLost(evt);
            }
        });
        jtxt_codigo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxt_codigoKeyPressed(evt);
            }
        });

        jlbl_folio.setFont(new java.awt.Font("Tahoma", 1, 14));
        jlbl_folio.setText("Folio Boleto:");

        jtxt_folio.setEditable(false);
        jtxt_folio.setFont(new java.awt.Font("Tahoma", 1, 18));
        jtxt_folio.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtxt_folio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxt_folioKeyPressed(evt);
            }
        });

        jlbl_tipopasajero.setFont(new java.awt.Font("Tahoma", 1, 14));
        jlbl_tipopasajero.setText("Tipo Pasajero:");

        jtxt_tipopasajero.setEditable(false);
        jtxt_tipopasajero.setFont(new java.awt.Font("Tahoma", 1, 18));
        jtxt_tipopasajero.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtxt_tipopasajero.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxt_tipopasajeroKeyPressed(evt);
            }
        });

        jlbl_servicio.setFont(new java.awt.Font("Tahoma", 1, 14));
        jlbl_servicio.setText("Servicio:");

        jtxt_servicio.setEditable(false);
        jtxt_servicio.setFont(new java.awt.Font("Tahoma", 1, 18));
        jtxt_servicio.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtxt_servicio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxt_servicioKeyPressed(evt);
            }
        });

        jlbl_motivo.setFont(new java.awt.Font("Tahoma", 1, 14));
        jlbl_motivo.setText("Motivo:");

        jtxt_motivo.setEditable(false);
        jtxt_motivo.setFont(new java.awt.Font("Tahoma", 1, 18));
        jtxt_motivo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxt_motivoKeyPressed(evt);
            }
        });

        jlbl_folio_preimpreso.setFont(new java.awt.Font("Tahoma", 1, 14));
        jlbl_folio_preimpreso.setText("Folio Preimpreso:");

        jtxt_folio_preimpreso.setBackground(new java.awt.Color(235, 235, 228));
        jtxt_folio_preimpreso.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtxt_folio_preimpreso.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jtxt_folio_preimpreso.setFont(new java.awt.Font("Tahoma", 1, 20));
        jtxt_folio_preimpreso.setOpaque(false);
        jtxt_folio_preimpreso.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtxt_folio_preimpresoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtxt_folio_preimpresoFocusLost(evt);
            }
        });
        jtxt_folio_preimpreso.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxt_folio_preimpresoKeyPressed(evt);
            }
        });

        jlbl_folio_p.setFont(new java.awt.Font("Tahoma", 1, 14));
        jlbl_folio_p.setText("Folio Preimpreso:");

        jntxt_folio_p.setBackground(new java.awt.Color(255, 255, 204));
        jntxt_folio_p.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jntxt_folio_p.setFont(new java.awt.Font("Tahoma", 1, 18));
        jntxt_folio_p.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jntxt_folio_pFocusLost(evt);
            }
        });
        jntxt_folio_p.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jntxt_folio_pKeyPressed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14));
        jLabel1.setText("Referencia:");

        jtxt_referencia.setBackground(new java.awt.Color(255, 255, 204));
        jtxt_referencia.setFont(new java.awt.Font("Tahoma", 1, 18));
        jtxt_referencia.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtxt_referenciaFocusLost(evt);
            }
        });
        jtxt_referencia.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxt_referenciaKeyPressed(evt);
            }
        });
        jtxt_referencia.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jtxt_referenciaMouseReleased(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14));
        jLabel2.setText("Corrida Actual:");

        jlcorrida.setFont(new java.awt.Font("Tahoma", 1, 18));
        jlcorrida.setForeground(new java.awt.Color(0, 51, 255));
        jlcorrida.setText(".");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "MODO", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 16)));
        buttonGroup1.add(jmodo1);
        jmodo1.setFont(new java.awt.Font("Tahoma", 1, 14));
        jmodo1.setSelected(true);
        jmodo1.setText("Consulta");
        jmodo1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jmodo1.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jmodo1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmodo1ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jmodo2);
        jmodo2.setFont(new java.awt.Font("Tahoma", 1, 14));
        jmodo2.setText("Abordaje");
        jmodo2.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jmodo2.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jmodo2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmodo2ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(55, 55, 55)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jmodo2)
                    .add(jmodo1))
                .addContainerGap(47, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jmodo1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jmodo2))
        );

        jlabel.setOpaque(true);

        jLTotal.setFont(new java.awt.Font("Tahoma", 1, 28));
        jLTotal.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        progressBar.setIndeterminate(true);

        etiqueta.setFont(new java.awt.Font("Tahoma", 1, 14));
        etiqueta.setText("En Proceso:");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(etiqueta)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(progressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 237, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                            .add(16, 16, 16)
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                .add(jlbl_nombre)
                                .add(jlbl_codigo)
                                .add(jLabel2)
                                .add(jLabel1))
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(jtxt_nombre, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 802, Short.MAX_VALUE)
                                .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                        .add(layout.createSequentialGroup()
                                            .add(2, 2, 2)
                                            .add(jlcorrida, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 501, Short.MAX_VALUE))
                                        .add(layout.createSequentialGroup()
                                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                                .add(jtxt_referencia, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .add(jtxt_codigo, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE))
                                            .add(89, 89, 89)
                                            .add(jlbl_folio_p)
                                            .add(4, 4, 4)))
                                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                        .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                            .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                            .add(62, 62, 62))
                                        .add(org.jdesktop.layout.GroupLayout.TRAILING, jntxt_folio_p, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 299, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
                        .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                            .add(42, 42, 42)
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(org.jdesktop.layout.GroupLayout.TRAILING, jlbl_barraEstado, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 905, Short.MAX_VALUE)
                                .add(layout.createSequentialGroup()
                                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                        .add(jlbl_motivo)
                                        .add(jlbl_folio)
                                        .add(jlbl_corrida)
                                        .add(jlbl_estado)
                                        .add(jlbl_operacion)
                                        .add(jlbl_tipopasajero))
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                        .add(jtxt_motivo, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 802, Short.MAX_VALUE)
                                        .add(jtxt_estado, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 802, Short.MAX_VALUE)
                                        .add(layout.createSequentialGroup()
                                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                                .add(jtxt_folio, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
                                                .add(jtxt_corrida, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
                                                .add(jtxt_operacion, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
                                                .add(layout.createSequentialGroup()
                                                    .add(jtxt_tipopasajero, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 266, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                    .add(jlabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)))
                                            .add(28, 28, 28)
                                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                                .add(jlbl_folio_preimpreso)
                                                .add(jlbl_servicio)
                                                .add(jlbl_hora)
                                                .add(jlbl_asiento))
                                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                                .add(jtxt_servicio, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE)
                                                .add(jtxt_hora, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE)
                                                .add(layout.createSequentialGroup()
                                                    .add(jtxt_asiento, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 96, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                    .add(jLTotal, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE))
                                                .add(jtxt_folio_preimpreso, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE)))))))))
                .add(30, 30, 30))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel2)
                            .add(jlcorrida, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 35, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jlbl_codigo)
                            .add(jtxt_codigo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 35, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jntxt_folio_p, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 35, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel1)
                    .add(jlbl_folio_p)
                    .add(jtxt_referencia, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 35, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(51, 51, 51)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jlbl_nombre)
                    .add(jtxt_nombre, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 42, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(jlbl_tipopasajero)
                                .add(jtxt_tipopasajero, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 42, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(6, 6, 6))
                        .add(layout.createSequentialGroup()
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(jtxt_folio_preimpreso, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 42, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(jlbl_folio_preimpreso))
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)))
                    .add(jlabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 41, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jtxt_corrida, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 42, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jlbl_corrida))
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jtxt_hora, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 42, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jlbl_hora)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jLTotal, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jtxt_asiento, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                        .add(jlbl_asiento))
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jtxt_folio, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                        .add(jlbl_folio)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jlbl_operacion)
                    .add(jtxt_operacion, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 42, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jlbl_servicio)
                    .add(jtxt_servicio, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 42, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(29, 29, 29)
                        .add(jlbl_estado))
                    .add(layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jtxt_estado, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 141, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jtxt_motivo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 44, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jlbl_motivo))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(progressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 32, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(15, 15, 15)
                        .add(etiqueta)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jlbl_barraEstado, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 47, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jmodo1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmodo1ActionPerformed
    limpiar_cajitas();
    jtxt_codigo.requestFocus();
        jLTotal.setText("Capacidad: "+capacidad);
    }//GEN-LAST:event_jmodo1ActionPerformed

    private void jmodo2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmodo2ActionPerformed
    //jlbl_barraEstado.setText("<html>  <font color=FF0000>   F4</font> Salir de Validar Código de Barras | <font color=FF0000>   ENTER</font> Búsqueda de Boleto | <font color=FF0000>   F3</font> Búsqueda de Boleto por Nombre | <font color=FF0000>   F6</font> Impresión de Boleto de Internet| <font color=FF0000>CTRL+2</font> Minimizar ventana | <font color=FF0000>CTRL+1</font> Mostrar siguiente ventana");  
    jlbl_barraEstado.setText("<html>  <font color=FF0000>   ESC</font> Salir de Validar Código de Barras | <font color=FF0000>   ENTER</font> Búsqueda de Boleto | <font color=FF0000>   F3</font> Búsqueda de Boleto por Nombre | <font color=FF0000>   F6</font> Impresión de Boleto de Internet");  
    jtxt_codigo.setEditable(true);
    jntxt_folio_p.setEditable(true);
    jtxt_referencia.setEditable(true);
    limpiar_cajitas();
    //jlbl_barraEstado.setText("<html>  <font color=FF0000>   F4</font> Salir de Validar Código de Barras | <font color=FF0000>   ENTER</font> Búsqueda de Boleto | <font color=FF0000>   F3</font> Búsqueda de Boleto por Nombre | <font color=FF0000>   F6</font> Impresión de Boleto de Internet| <font color=FF0000>CTRL+2</font> Minimizar ventana | <font color=FF0000>CTRL+1</font> Mostrar siguiente ventana");  
    jlbl_barraEstado.setText("<html>  <font color=FF0000>   ESC</font> Salir de Validar Código de Barras | <font color=FF0000>   ENTER</font> Búsqueda de Boleto | <font color=FF0000>   F3</font> Búsqueda de Boleto por Nombre | <font color=FF0000>   F6</font> Impresión de Boleto de Internet");  
    jntxt_folio_p.setText("");
    jtxt_referencia.setText("");
    jtxt_codigo.setText("");
    jtxt_codigo.setBackground(new Color(192,190,207));
    jtxt_codigo.requestFocus();
    abordados=cosa.getPersonasAbordo(corrida);
    jLTotal.setText(""+abordados+" de "+capacidad);
    }//GEN-LAST:event_jmodo2ActionPerformed

    private void jtxt_referenciaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtxt_referenciaFocusLost
        jtxt_referencia.setBackground(new Color(255,255,204));
    }//GEN-LAST:event_jtxt_referenciaFocusLost

    private void jtxt_referenciaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxt_referenciaKeyPressed
        jtxt_motivo.setVisible(false);
        jlbl_motivo.setVisible(false);
        jtxt_referencia.setBackground(new Color(192,190,207));
        //jlbl_barraEstado.setText("<html>  <font color=FF0000>   F4</font> Salir de Validar Código de Barras | <font color=FF0000>   ENTER</font> Búsqueda de Boleto | <font color=FF0000>   F3</font> Búsqueda de Boleto por Nombre | <font color=FF0000>   F6</font> Impresión de Boleto de Internet| <font color=FF0000>CTRL+2</font> Minimizar ventana | <font color=FF0000>CTRL+1</font> Mostrar siguiente ventana");
        jlbl_barraEstado.setText("<html>  <font color=FF0000>   ESC</font> Salir de Validar Código de Barras | <font color=FF0000>   ENTER</font> Búsqueda de Boleto | <font color=FF0000>   F3</font> Búsqueda de Boleto por Nombre | <font color=FF0000>   F6</font> Impresión de Boleto de Internet");
        jtxt_referencia.requestFocus();
//        if(evt.getKeyCode() == evt.VK_1 && evt.isControlDown()){
//                setEventoTeclado(evt);
//                try {this.setIcon(true);} catch (PropertyVetoException ex) { ; }
//                return;
//        }
//
//        if(evt.getKeyCode() == evt.VK_2 && evt.isControlDown()){
//                try {this.setIcon(true);} catch (PropertyVetoException ex) { ; }
//                return;
//        }
                
        
        if(evt.getKeyCode() == evt.VK_UP){
            jtxt_codigo.setBackground(new Color(192,190,207));
            jtxt_codigo.requestFocus();
            jntxt_folio_p.setText("");
            jtxt_referencia.setText("");
            jtxt_codigo.setText("");
        }
        
        if(evt.getKeyCode() == evt.VK_F3){
            if(enproceso) return;
            JDLG_BusquedaNombre busquedaNombre = new JDLG_BusquedaNombre(null, true, cosa, this);
        }
        if(evt.getKeyCode() == evt.VK_DOWN) {
            jntxt_folio_p.setBackground(new Color(192,190,207));
            jntxt_folio_p.requestFocus();
            jntxt_folio_p.setText("");
            jtxt_referencia.setText("");
            jtxt_codigo.setText("");
        }
        
        evento(evt);
    }//GEN-LAST:event_jtxt_referenciaKeyPressed

    private void jtxt_referenciaMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtxt_referenciaMouseReleased
// TODO add your handling code here:
    }//GEN-LAST:event_jtxt_referenciaMouseReleased

    private void jntxt_folio_pKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jntxt_folio_pKeyPressed
        jtxt_motivo.setVisible(false);
        jlbl_motivo.setVisible(false);
        jntxt_folio_p.setBackground(new Color(192,190,207));
        //jlbl_barraEstado.setText("<html>  <font color=FF0000>   F4</font> Salir de Validar Código de Barras | <font color=FF0000>   ENTER</font> Búsqueda de Boleto | <font color=FF0000>   F3</font> Búsqueda de Boleto por Nombre | <font color=FF0000>   F6</font> Impresión de Boleto de Internet| <font color=FF0000>CTRL+2</font> Minimizar ventana | <font color=FF0000>CTRL+1</font> Mostrar siguiente ventana");  
        jlbl_barraEstado.setText("<html>  <font color=FF0000>   ESC</font> Salir de Validar Código de Barras | <font color=FF0000>   ENTER</font> Búsqueda de Boleto | <font color=FF0000>   F3</font> Búsqueda de Boleto por Nombre | <font color=FF0000>   F6</font> Impresión de Boleto de Internet");  
        jntxt_folio_p.requestFocus();
//        if(evt.getKeyCode() == evt.VK_1 && evt.isControlDown()){
//                setEventoTeclado(evt);
//                try {this.setIcon(true);} catch (PropertyVetoException ex) { ; }
//                return;
//        }
//
//        if(evt.getKeyCode() == evt.VK_2 && evt.isControlDown()){
//                try {this.setIcon(true);} catch (PropertyVetoException ex) { ; }
//                return;
//        }
//        
        if(evt.getKeyCode() == evt.VK_F3){
            if(enproceso) return;
            JDLG_BusquedaNombre busquedaNombre = new JDLG_BusquedaNombre(null, true, cosa, this);
        }
        
        if(evt.getKeyCode() == evt.VK_UP){
            jtxt_referencia.setBackground(new Color(192,190,207));
            jtxt_referencia.requestFocus();
            jntxt_folio_p.setText("");
            jtxt_referencia.setText("");
            jtxt_codigo.setText("");
        }
        if(evt.getKeyCode() == evt.VK_DOWN) {
            jtxt_codigo.setBackground(new Color(192,190,207));
            jtxt_codigo.requestFocus();
            jntxt_folio_p.setText("");
            jtxt_referencia.setText("");
            jtxt_codigo.setText("");
        }
        
        evento(evt);
    }//GEN-LAST:event_jntxt_folio_pKeyPressed

    private void jntxt_folio_pFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jntxt_folio_pFocusLost
        jntxt_folio_p.setBackground(new Color(255,255,204));
    }//GEN-LAST:event_jntxt_folio_pFocusLost

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
        jtxt_codigo.setBackground(new Color(192,190,207));
        jtxt_codigo.requestFocusInWindow();
    }//GEN-LAST:event_formFocusGained

    private void jtxt_folio_preimpresoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtxt_folio_preimpresoFocusLost
    if(jtxt_folio_preimpreso.isEnabled()){
        jtxt_folio_preimpreso.setOpaque(true);
        jtxt_folio_preimpreso.setBackground(new Color(255,255,204));
        }
    }//GEN-LAST:event_jtxt_folio_preimpresoFocusLost

    private void jtxt_folio_preimpresoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtxt_folio_preimpresoFocusGained
    if(jtxt_folio_preimpreso.isEnabled()){
        jtxt_folio_preimpreso.setOpaque(true);
        jtxt_folio_preimpreso.setBackground(new Color(192,190,207));
        }
        //jlbl_barraEstado.setText("<html>  <font color=FF0000>   ESC</font> Ingresar otro Folio Preimpreso | <font color=FF0000>   F3</font> Búsqueda de Boleto");  
    }//GEN-LAST:event_jtxt_folio_preimpresoFocusGained

    private void jtxt_codigoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtxt_codigoFocusLost
        jtxt_codigo.setBackground(new Color(255,255,204));
    }//GEN-LAST:event_jtxt_codigoFocusLost

    private void jtxt_folio_preimpresoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxt_folio_preimpresoKeyPressed
        if(evt.getKeyCode() == evt.VK_F3)
        {
            SwingWorker worker = new SwingWorker() {
                public Object construct() {
                    return doWorkF3();
                }

                public void finished() {
                    etiqueta.setVisible(false);
                    progressBar.setVisible(false);
                    enproceso=false;
                }
            };
            
            if(enproceso) return;
            enproceso=true;
            worker.start();
        }
        
        if(evt.getKeyCode() == evt.VK_ESCAPE){
            /*if(jtxt_folio_preimpreso.getText().length() > 0) {
                jtxt_folio_preimpreso.setText("");
                jtxt_folio_preimpreso.requestFocus();
                jlbl_barraEstado.setText("<html>  <font color=FF0000>   ESC</font> Ingresar Codigo de Barras | <font color=FF0000>   F3</font> Búsqueda de Boleto");  
            }else{*/
                on_off(true);
                jtxt_codigo.setBackground(new Color(192,190,207));
                //jlbl_barraEstado.setText("<html>  <font color=FF0000>   F4</font> Salir de Validar Código de Barras | <font color=FF0000>   ENTER</font> Búsqueda de Boleto | <font color=FF0000>   F3</font> Búsqueda de Boleto por Nombre | <font color=FF0000>   F6</font> Impresión de Boleto de Internet| <font color=FF0000>CTRL+2</font> Minimizar ventana | <font color=FF0000>CTRL+1</font> Mostrar siguiente ventana");  
                jlbl_barraEstado.setText("<html>  <font color=FF0000>   ESC</font> Salir de Validar Código de Barras | <font color=FF0000>   ENTER</font> Búsqueda de Boleto | <font color=FF0000>   F3</font> Búsqueda de Boleto por Nombre | <font color=FF0000>   F6</font> Impresión de Boleto de Internet");  
                jntxt_folio_p.setText("");
                jtxt_referencia.setText("");
                jtxt_codigo.setText("");
                jtxt_codigo.setBackground(new Color(192,190,207));
                jtxt_codigo.requestFocus();
                
            //}
                
        }
    }//GEN-LAST:event_jtxt_folio_preimpresoKeyPressed

     private Connection conection() throws ClassNotFoundException, SQLException, NamingException{
            Connection conn = null;
            try {
                Context initContext = new InitialContext();
                DataSource ds = (DataSource)initContext.lookup("TMS_DB");        
                conn = ds.getConnection();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
            return conn;
    }
    
    
    private void jtxt_motivoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxt_motivoKeyPressed
        evento(evt);
    }//GEN-LAST:event_jtxt_motivoKeyPressed

    private void jtxt_estadoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxt_estadoKeyPressed
        evento(evt);
    }//GEN-LAST:event_jtxt_estadoKeyPressed

    private void jtxt_servicioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxt_servicioKeyPressed
        evento(evt);
    }//GEN-LAST:event_jtxt_servicioKeyPressed

    private void jtxt_folioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxt_folioKeyPressed
        evento(evt);
    }//GEN-LAST:event_jtxt_folioKeyPressed

    private void jtxt_operacionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxt_operacionKeyPressed
        evento(evt);
    }//GEN-LAST:event_jtxt_operacionKeyPressed

    private void jtxt_horaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxt_horaKeyPressed
        evento(evt);
    }//GEN-LAST:event_jtxt_horaKeyPressed

    private void jtxt_corridaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxt_corridaKeyPressed
        evento(evt);
    }//GEN-LAST:event_jtxt_corridaKeyPressed

    private void jtxt_tipopasajeroKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxt_tipopasajeroKeyPressed
        evento(evt);
    }//GEN-LAST:event_jtxt_tipopasajeroKeyPressed

    private void jtxt_asientoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxt_asientoKeyPressed
        evento(evt);
    }//GEN-LAST:event_jtxt_asientoKeyPressed

    private void jtxt_nombreKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxt_nombreKeyPressed
        evento(evt);
    }//GEN-LAST:event_jtxt_nombreKeyPressed

    private void jtxt_codigoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxt_codigoKeyPressed
        jtxt_motivo.setVisible(false);
        jlbl_motivo.setVisible(false);
        jtxt_codigo.setBackground(new Color(192,190,207));
        //jlbl_barraEstado.setText("<html>  <font color=FF0000>   F4</font> Salir de Validar Código de Barras | <font color=FF0000>   ENTER</font> Búsqueda de Boleto | <font color=FF0000>   F3</font> Búsqueda de Boleto por Nombre | <font color=FF0000>   F6</font> Impresión de Boleto de Internet| <font color=FF0000>CTRL+2</font> Minimizar ventana | <font color=FF0000>CTRL+1</font> Mostrar siguiente ventana");  
        jlbl_barraEstado.setText("<html>  <font color=FF0000>   ESC</font> Salir de Validar Código de Barras | <font color=FF0000>   ENTER</font> Búsqueda de Boleto | <font color=FF0000>   F3</font> Búsqueda de Boleto por Nombre | <font color=FF0000>   F6</font> Impresión de Boleto de Internet");  
        jtxt_codigo.requestFocus();
//        if(evt.getKeyCode() == evt.VK_1 && evt.isControlDown()){
//                setEventoTeclado(evt);
//                try {this.setIcon(true);} catch (PropertyVetoException ex) { ; }
//                return;
//        }
//
//        if(evt.getKeyCode() == evt.VK_2 && evt.isControlDown()){
//                try {this.setIcon(true);} catch (PropertyVetoException ex) { ; }
//                return;
//        }
        
        if(evt.getKeyCode() == evt.VK_F3){
            if(enproceso) return;
            System.out.println("iniciar busquedaNombre");
            JDLG_BusquedaNombre busquedaNombre = new JDLG_BusquedaNombre(null, true, cosa, this);
            busquedaNombre.setVisible(true);
        }
        
        if(evt.getKeyCode() == evt.VK_UP){
            jntxt_folio_p.setBackground(new Color(192,190,207));
            jntxt_folio_p.requestFocus();
            jntxt_folio_p.setText("");
            jtxt_referencia.setText("");
            jtxt_codigo.setText("");
        }
        if(evt.getKeyCode() == evt.VK_DOWN){
            jtxt_referencia.setBackground(new Color(192,190,207));
            jtxt_referencia.requestFocus();
            jntxt_folio_p.setText("");
            jtxt_referencia.setText("");
            jtxt_codigo.setText("");
        }
        
        evento(evt);

    }//GEN-LAST:event_jtxt_codigoKeyPressed

    public KeyEvent getEventoTeclado(){ return this.eventoTeclado; }
    
    public void setEventoTeclado(KeyEvent evento){ this.eventoTeclado=evento; }
    
private boolean enproceso=false;
    public void evento(java.awt.event.KeyEvent evt)
    {
//System.out.println("enproceso: "+enproceso);        
if(enproceso) return;

//System.out.println("dentro evento!!");
        if(evt.getKeyCode() == evt.VK_F6)
        {
            if(enproceso) return;    
            on_off(false);
            jlbl_barraEstado.setText("<html>  <font color=FF0000>   ESC</font> Ingresar Codigo de Barras | <font color=FF0000>   F3</font> Búsqueda de Boleto");  
            jtxt_folio_preimpreso.requestFocus();
        }
        
        if (evt.getKeyCode() == evt.VK_ENTER){
            buscarB();
            //buscarBoleto();
        }

System.out.println("jtxt_motivo.getText() = "+jtxt_estado.getText());
//        if(evt.getKeyCode() == evt.VK_F4) {
        if(evt.getKeyCode() == evt.VK_ESCAPE && jtxt_estado.getText().equals("")) {
            if(enproceso) return;
//            int result = JOptionPane.showOptionDialog(this, "¿Desea cerrar Validar Código de Barras?",
//                    "TMS- Validar Codigo Barras", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);
//            if(result == JOptionPane.YES_OPTION)
//                this.dispose();
            
            this.dispose();
        }
        
        if(evt.getKeyCode() == evt.VK_ESCAPE){ 
            if(enproceso) return;    
            //jlbl_barraEstado.setText("<html>  <font color=FF0000>   F4</font> Salir de Validar Código de Barras | <font color=FF0000>   ENTER</font> Búsqueda de Boleto | <font color=FF0000>   F3</font> Búsqueda de Boleto por Nombre | <font color=FF0000>   F6</font> Impresión de Boleto de Internet| <font color=FF0000>CTRL+2</font> Minimizar ventana | <font color=FF0000>CTRL+1</font> Mostrar siguiente ventana");  
            jlbl_barraEstado.setText("<html>  <font color=FF0000>   ESC</font> Salir de Validar Código de Barras | <font color=FF0000>   ENTER</font> Búsqueda de Boleto | <font color=FF0000>   F3</font> Búsqueda de Boleto por Nombre | <font color=FF0000>   F6</font> Impresión de Boleto de Internet");  
            jtxt_codigo.setEditable(true);
            jntxt_folio_p.setEditable(true);
            jtxt_referencia.setEditable(true);
            limpiar_cajitas();
            //jlbl_barraEstado.setText("<html>  <font color=FF0000>   F4</font> Salir de Validar Código de Barras | <font color=FF0000>   ENTER</font> Búsqueda de Boleto | <font color=FF0000>   F3</font> Búsqueda de Boleto por Nombre | <font color=FF0000>   F6</font> Impresión de Boleto de Internet| <font color=FF0000>CTRL+2</font> Minimizar ventana | <font color=FF0000>CTRL+1</font> Mostrar siguiente ventana");  
            jlbl_barraEstado.setText("<html>  <font color=FF0000>   ESC</font> Salir de Validar Código de Barras | <font color=FF0000>   ENTER</font> Búsqueda de Boleto | <font color=FF0000>   F3</font> Búsqueda de Boleto por Nombre | <font color=FF0000>   F6</font> Impresión de Boleto de Internet");  
            jntxt_folio_p.setText("");
            jtxt_referencia.setText("");
            jtxt_codigo.setText("");
            jtxt_codigo.setBackground(new Color(192,190,207));
            jtxt_codigo.requestFocus();

            on_off(true);
        }

    }
    
    Object doWork() {
        try {

        buscarBoleto();    
        
        if (Thread.interrupted()) {
            throw new InterruptedException();
        }
        
        }catch (InterruptedException e) {
            return "Interrupted";
        }catch (Exception ex) {
            ex.printStackTrace();
            return "Interrupted";            
        }
       
        return "All Done";
   }            

    Object doWorkF3() {
        try {

        etiqueta.setVisible(true);
        progressBar.setVisible(true);             
            boolean continuar = true;
            TmsBoletosVentaTbl bv = new TmsBoletosVentaTbl();
            bv = cosa.buscarFolioPreimpreso(jtxt_folio_preimpreso.getText());
            String folio_preimpreso = "";
            if(bv != null) {
                System.out.println(bv.getClaveCorrida()  + " " + bv.getOrigen());
                bv = cosa.buscarCodigoBarras(bv.getAdicional6());
                if(bv != null) {
                    String respuesta[] = cosa.validarBolInternet(bv.getClaveCorrida(), bv.getAdicional6());

                    if(respuesta[1].equals("[0]")) {
                        JOptionPane.showMessageDialog( this, "La Fecha del Boleto es Anterior al día de hoy",
                                        "TMS - Validar Codigo Barras", JOptionPane.ERROR_MESSAGE );
                        continuar = false;
                        jtxt_folio_preimpreso.setText("");
                        jtxt_folio_preimpreso.setEnabled(false);
                        jtxt_folio_preimpreso.setOpaque(false);
                        jtxt_folio_preimpreso.setBackground(null);
                        System.out.println("Habilitado");                        
                        jtxt_folio_preimpreso.requestFocus();
                    }

                    if(respuesta[1].equals("[3]")) {
                        JOptionPane.showMessageDialog( this, "La Fecha del Boleto es Posterior al día de hoy",
                                        "TMS - Validar Codigo Barras", JOptionPane.WARNING_MESSAGE );
                        continuar = true;
                        folio_preimpreso = jtxt_folio_preimpreso.getText();
                        jtxt_folio_preimpreso.setText("");
                        jtxt_folio_preimpreso.setEnabled(false);
                        jtxt_folio_preimpreso.setOpaque(false);
                        jtxt_folio_preimpreso.setBackground(null);
                        System.out.println("Habilitado");                        
                        jtxt_folio_preimpreso.requestFocus();
                    }

                    if(respuesta[1].equals("[1]")) {
                        continuar = true;
                        folio_preimpreso = jtxt_folio_preimpreso.getText();
                        /*jtxt_folio_preimpreso.setText("");
                        jtxt_folio_preimpreso.requestFocus();*/
                    }
                    
                    if(respuesta[1].equals("[4]")) {
                        JOptionPane.showMessageDialog( this, "¡Error! A este boleto ya se le hizo un Cambio de Horario o Cancelación",
                                        "TMS - Validar Codigo Barras", JOptionPane.ERROR_MESSAGE );
                        continuar = false;
                        jtxt_folio_preimpreso.setText("");
                        jtxt_folio_preimpreso.setEnabled(false);
                        jtxt_folio_preimpreso.setOpaque(false);
                        jtxt_folio_preimpreso.setBackground(null);
                        System.out.println("Habilitado");                        
                        jtxt_folio_preimpreso.requestFocus();
                    }

                    if(respuesta[1].equals("[2]")) {
                        JOptionPane.showMessageDialog( this, "¡Error! No se halló información de ese boleto",
                                        "TMS - Validar Codigo Barras", JOptionPane.ERROR_MESSAGE );
                        continuar = false;
                        jtxt_folio_preimpreso.setText("");
                        jtxt_folio_preimpreso.setEnabled(false);
                        jtxt_folio_preimpreso.setOpaque(false);
                        jtxt_folio_preimpreso.setBackground(null);
                        System.out.println("Habilitado [2]");                        
                        jtxt_folio_preimpreso.requestFocus();
                    }

                    if (continuar) {
                        try {                
                            Map param = new HashMap();
                            InputStream imagen = getClass().getClassLoader().getResourceAsStream("Reportes/ER_Logo.jpg");
                            //String dblink = cosa.buscardblink(folio_preimpreso, false);
                            //String dblink = "TCAPU_LINK.ESTRELLAROJA.COM.MX";
                            //System.out.println("dblink "+dblink + " folio "+folio_preimpreso);
                            //String query = "SELECT bv.*, TRUNC(CV.fecha_hora_corrida) fecha, TO_CHAR(CV.fecha_hora_corrida, 'hh24:mi') hora, CASE bv.tipo_pasajero WHEN 'A' THEN 'Adulto' WHEN 'M' THEN 'Niño' WHEN 'E' THEN 'Estudiante' WHEN 'P' THEN 'Profesor' END, TO_CHAR(bv.FECHA_HORA_VENTA, 'DD/MM/YYYY hh24:mi') fecha_venta FROM TMS_BOLETOS_VENTA_TBL@"+dblink+" bv, TMS_CORRIDAS_VENTA_TBL@"+dblink+" CV WHERE bv.folio_preimpreso = '"+folio_preimpreso+"' AND bv.CLAVE_CORRIDA = CV.CLAVE_CORRIDA";
                            String query = "SELECT bv.*, TRUNC(CV.fecha_hora_corrida) fecha, TO_CHAR(CV.fecha_hora_corrida, 'hh24:mi') hora, CASE bv.tipo_pasajero WHEN 'A' THEN 'Adulto' WHEN 'M' THEN 'Niño' WHEN 'E' THEN 'Estudiante' WHEN 'P' THEN 'Profesor' END tipo, TO_CHAR(bv.FECHA_HORA_VENTA, 'DD/MM/YYYY hh24:mi') fecha_venta FROM TMS_BOLETOS_VENTA_TBL bv, TMS_CORRIDAS_VENTA_TBL CV WHERE bv.folio_preimpreso = '"+folio_preimpreso+"' AND bv.CLAVE_CORRIDA = CV.CLAVE_CORRIDA";
                            System.out.println("query "+query);
                            param.put("p_query",query);
                            param.put("IMAGENLOGO",imagen);
                            InputStream input = getClass().getClassLoader().getResourceAsStream("Reportes/Boleto_Interntet.jasper");
                            JasperPrint print = null; 
                            print=JasperFillManager.fillReport(input,param,conection());
                            System.out.println("print : "+ print);
                            System.out.println("reporte : "+ input);
                            //System.out.println("imagen : "+ imagen);
                            JRViewer er = new JRViewer(print);
                            Dimension FrameSize = this.getSize();
                            //er.setBounds(0,0,FrameSize.width - 10,FrameSize.height - 150);//
                            er.setBounds(0,0,735,463);
                            JasperViewer.viewReport(print,false);
                        } catch(Exception e) {
                            e.printStackTrace();
                        }
                        //jlbl_barraEstado.setText("<html>  <font color=FF0000>   ESC</font> Ingresar otro Folio Preimpreso | <font color=FF0000>   F3</font> Búsqueda de Boleto");  
                    }
                }else{
                JOptionPane.showMessageDialog( this, "¡Error! Ese boleto no Existe(1)",
                                        "TMS - Validar Codigo Barras", JOptionPane.ERROR_MESSAGE );
                //jlbl_barraEstado.setText("<html>  <font color=FF0000>   F4</font> Salir de Validar Código de Barras | <font color=FF0000>   ENTER</font> Búsqueda de Boleto | <font color=FF0000>   F3</font> Búsqueda de Boleto por Nombre | <font color=FF0000>   F6</font> Impresión de Boleto de Internet| <font color=FF0000>CTRL+2</font> Minimizar ventana | <font color=FF0000>CTRL+1</font> Mostrar siguiente ventana");  
                jlbl_barraEstado.setText("<html>  <font color=FF0000>   ESC</font> Salir de Validar Código de Barras | <font color=FF0000>   ENTER</font> Búsqueda de Boleto | <font color=FF0000>   F3</font> Búsqueda de Boleto por Nombre | <font color=FF0000>   F6</font> Impresión de Boleto de Internet");  
                jtxt_folio_preimpreso.setText("");
                jtxt_folio_preimpreso.setEnabled(false);
                jtxt_folio_preimpreso.setOpaque(false);
                jtxt_folio_preimpreso.setBackground(null);
                System.out.println("Folio Preimpreso no encontrado!!!");                
                jtxt_folio_preimpreso.requestFocus();
                }
                    
            }else
            {
                JOptionPane.showMessageDialog( this, "¡Error! Ese boleto no Existe(2)",
                                        "TMS - Validar Codigo Barras", JOptionPane.ERROR_MESSAGE );
                //jlbl_barraEstado.setText("<html>  <font color=FF0000>   F4</font> Salir de Validar Código de Barras | <font color=FF0000>   ENTER</font> Búsqueda de Boleto | <font color=FF0000>   F3</font> Búsqueda de Boleto por Nombre | <font color=FF0000>   F6</font> Impresión de Boleto de Internet| <font color=FF0000>CTRL+2</font> Minimizar ventana | <font color=FF0000>CTRL+1</font> Mostrar siguiente ventana");
                jlbl_barraEstado.setText("<html>  <font color=FF0000>   ESC</font> Salir de Validar Código de Barras | <font color=FF0000>   ENTER</font> Búsqueda de Boleto | <font color=FF0000>   F3</font> Búsqueda de Boleto por Nombre | <font color=FF0000>   F6</font> Impresión de Boleto de Internet");
                System.out.println("Habilitado");
                jtxt_folio_preimpreso.setText("");
                jtxt_folio_preimpreso.setEnabled(false);
                jtxt_folio_preimpreso.setOpaque(false);                
                jtxt_folio_preimpreso.setBackground(null);
                System.out.println("Habilitado");
                jtxt_codigo.setBackground(new Color(192,190,207));
                this.requestFocusInWindow();
            }
            
        if (Thread.interrupted()) {
            throw new InterruptedException();
        }
        
        }catch (InterruptedException e) {
            return "Interrupted";
        }catch (Exception ex) {
            ex.printStackTrace();
            return "Interrupted";            
        }
        return "All Done";
   }    
    
    private void limpiar_cajitas() {
        jtxt_nombre.setText("");
        jtxt_hora.setText("");
        jtxt_asiento.setText("");
        jtxt_corrida.setText("");
        jtxt_operacion.setText("");
        jtxt_estado.setText("");
        jtxt_folio.setText("");
        jtxt_folio_preimpreso.setText("");
        jtxt_servicio.setText("");
        jtxt_tipopasajero.setText("");
        jtxt_motivo.setVisible(false);
        jlbl_motivo.setVisible(false);
        jlabel.setOpaque(false);
        jlabel.setBackground(null);
    }

    private void on_off(boolean status) {
        jtxt_codigo.setText("");
        jtxt_nombre.setText("");
        jtxt_asiento.setText("");
        jtxt_tipopasajero.setText("");
        jtxt_corrida.setText("");
        jtxt_hora.setText("");
        jtxt_operacion.setText("");
        jtxt_folio.setText("");
        jtxt_servicio.setText("");
        jtxt_estado.setText("");
        jtxt_motivo.setText("");
        jtxt_folio_preimpreso.setText("");
        jtxt_folio_preimpreso.setOpaque(!status);
        jtxt_folio_preimpreso.setEnabled(!status);
        if(!status) jtxt_folio_preimpreso.setBackground(null);
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel etiqueta;
    private javax.swing.JLabel jLTotal;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel jlabel;
    private javax.swing.JLabel jlbl_asiento;
    private javax.swing.JLabel jlbl_barraEstado;
    private javax.swing.JLabel jlbl_codigo;
    private javax.swing.JLabel jlbl_corrida;
    private javax.swing.JLabel jlbl_estado;
    private javax.swing.JLabel jlbl_folio;
    private javax.swing.JLabel jlbl_folio_p;
    private javax.swing.JLabel jlbl_folio_preimpreso;
    private javax.swing.JLabel jlbl_hora;
    private javax.swing.JLabel jlbl_motivo;
    private javax.swing.JLabel jlbl_nombre;
    private javax.swing.JLabel jlbl_operacion;
    private javax.swing.JLabel jlbl_servicio;
    private javax.swing.JLabel jlbl_tipopasajero;
    private javax.swing.JLabel jlcorrida;
    private javax.swing.JRadioButton jmodo1;
    private javax.swing.JRadioButton jmodo2;
    private tms_TextFields.JNumberTextField jntxt_folio_p;
    private javax.swing.JTextField jtxt_asiento;
    private javax.swing.JPasswordField jtxt_codigo;
    private javax.swing.JTextField jtxt_corrida;
    private javax.swing.JTextField jtxt_estado;
    private javax.swing.JTextField jtxt_folio;
    private tms_TextFields.JNumberTextField jtxt_folio_preimpreso;
    private javax.swing.JTextField jtxt_hora;
    private javax.swing.JTextField jtxt_motivo;
    private javax.swing.JTextField jtxt_nombre;
    private javax.swing.JTextField jtxt_operacion;
    private tms_TextFields.JTextTextField jtxt_referencia;
    private javax.swing.JTextField jtxt_servicio;
    private javax.swing.JTextField jtxt_tipopasajero;
    private javax.swing.JProgressBar progressBar;
    // End of variables declaration//GEN-END:variables
    
    public void setFoco(){
        jtxt_codigo.setBackground(new Color(192,190,207));
        jtxt_codigo.requestFocus();
    }
    
    public void setReferencia(String referencia){
        jtxt_referencia.setText(referencia);
    }
    
    public void setFolioP(String folio){
        jntxt_folio_p.setText(folio);
    }    
    
    public void buscarBoleto(){
System.out.println("BuscarBoleto()..............");
                try{
                    String referencia = "";
                    System.out.println("referencia "+referencia);
                    if(jtxt_codigo.getText().length() <= 0 && jtxt_referencia.getText().length() <= 0 && jntxt_folio_p.getText().length() <= 0) {
                        JOptionPane.showMessageDialog( this, "¡Error! No ha seleccionado ningun parametro de búsqueda",
                                        "TMS - Validar Codigo Barras", JOptionPane.ERROR_MESSAGE );
                        return;
                    }

        etiqueta.setVisible(true);
        progressBar.setVisible(true);                    
                    TmsBoletosVentaTbl bv=null;
                    boolean foliop=false;
                    if(jtxt_codigo.getText().length() > 0)
                        referencia = jtxt_codigo.getText();
                    if(jtxt_referencia.getText().length() > 0)
                       referencia = jtxt_referencia.getText();
                    if(referencia.length() <= 0) {
                        bv = cosa.buscarFolioPreimpreso(jntxt_folio_p.getText());
                        foliop=true;
                        if(bv!=null && bv.getAdicional6()!=null){
                            referencia = bv.getAdicional6();
                            foliop=false;
                            }
                    }
                    System.out.println("referencia "+referencia);
                    nombre = new TmsBoletosVentaTbl();
                    
                    if(!foliop)
                        nombre = cosa.buscarCodigoBarras(referencia);
                    else nombre=bv;

                    if (nombre != null){
                        String cosas[];
                        if(nombre.getClaveCorrida().equals(corrida)){
                            if(nombre.getCaja().equals("CAJAWEB"))
                                cosas = cosa.validarEstado(nombre.getClaveCorrida(), nombre.getAdicional6());
                            else cosas = cosa.validarEstadoNormal(nombre.getClaveCorrida(), nombre.getFolioPreimpreso());
                            }
                        else{
                            if(nombre.getCaja().equals("CAJAWEB"))
                                cosas = cosa.validar(nombre.getClaveCorrida(),corrida, nombre.getAdicional6());
                            else cosas = cosa.validarNormal(corrida, nombre);                            
                            }
                        
                        /*
                        if(nombre.getCaja().equals("CAJAWEB"))
                            cosas = cosa.validar(nombre.getClaveCorrida(),nombre.getOrigen(), referencia);
                        else cosas = cosa.validarNormal(nombre);
                         */
                        System.out.println("cosa[1] "+cosas[1]);
                        if(cosas[1].equals("[1]")) {
                            jtxt_nombre.setText(nombre.getNombrePasajero());
                            jtxt_asiento.setText(nombre.getNoAsiento());
                            jtxt_corrida.setText(nombre.getClaveCorrida());
                            jtxt_hora.setForeground(new Color(0,0,0));
                            jtxt_hora.setFont(new Font(null, Font.BOLD, 24));
                            jtxt_hora.setText(cosas[0]);
                            
                            colorTipo();
                            jtxt_folio_preimpreso.setText(nombre.getFolioPreimpreso());
                            jtxt_folio.setText(nombre.getFolioBoleto());
                            jtxt_servicio.setText(nombre.getServicio());
                            jtxt_estado.setForeground(new Color(0,153,0));
                            jtxt_estado.setText("Válido");
                            int registrado=-1;
                            if(jmodo2.isSelected()){
                                registrado=cosa.registra(nombre.getBoletoId(), corrida, usuario, "A", corridaFH);
                                if(registrado==-1){
                                    JOptionPane.showMessageDialog(this, "No se pudo registrar el abordaje!.","Aviso!",
                                            JOptionPane.ERROR_MESSAGE);
                                    }
                                if(registrado == 1){
                                        jtxt_estado.setForeground(new Color(255,0,0));
                                        jtxt_estado.setText("Boleto Registrado");
                                        }
                                if(registrado == 0){
                                        abordados++;
                                        jLTotal.setText(""+abordados+" de "+capacidad);
                                        }
                                
                                }
                        }
                        if(cosas[1].equals("[0]")){
                            /*JOptionPane.showMessageDialog( this, "La fecha de la corrida es anterior al día de hoy",
                                    "TMS - Validar Codigo Barras", JOptionPane.ERROR_MESSAGE );*/
                            limpiar_cajitas();
                            jtxt_nombre.setText(nombre.getNombrePasajero());
                            jtxt_asiento.setText(nombre.getNoAsiento());
                            jtxt_corrida.setText(nombre.getClaveCorrida());
                            jtxt_hora.setForeground(new Color(255,0,0));
                            jtxt_hora.setFont(new Font(null, Font.BOLD, 24));
                            jtxt_hora.setText(cosas[0]);

                            colorTipo();
                            jtxt_folio_preimpreso.setText(nombre.getFolioPreimpreso());
                            jtxt_folio.setText(nombre.getFolioBoleto());
                            jtxt_servicio.setText(nombre.getServicio());
                            jtxt_estado.setForeground(new Color(255,0,0));
                            jtxt_estado.setText("No Válido");
                            jtxt_motivo.setVisible(true);
                            jlbl_motivo.setVisible(true);
                            jtxt_motivo.setText("La fecha u hora de la corrida es anterior a la actual.");
                        }
                        if(cosas[1].equals("[2]")){
                            /*JOptionPane.showMessageDialog( this, "¡Error! No se halló la corrida",
                                    "TMS - Validar Codigo Barras", JOptionPane.ERROR_MESSAGE );*/
                            jtxt_motivo.setVisible(true);
                            jlbl_motivo.setVisible(true);
                            jtxt_motivo.setText("¡Error! No se halló la corrida");
                            limpiar_cajitas();
                        }
                        if(cosas[1].equals("[4]")) {
                        /*JOptionPane.showMessageDialog( this, "¡Error! A este boleto ya se le hizo un Cambio de Horario o Cancelación",
                                        "TMS - Validar Codigo Barras", JOptionPane.ERROR_MESSAGE );*/
                            jtxt_motivo.setText("¡Error! A este boleto ya se le hizo un Cambio de Horario o Cancelación");
                            limpiar_cajitas();
                            jtxt_nombre.setText(nombre.getNombrePasajero());
                            jtxt_asiento.setText(nombre.getNoAsiento());
                            jtxt_corrida.setText(nombre.getClaveCorrida());
                            jtxt_hora.setForeground(new Color(255,0,0));
                            jtxt_hora.setFont(new Font(null, Font.BOLD, 24));
                            jtxt_hora.setText(cosas[0]);

                            colorTipo();
                            jtxt_folio_preimpreso.setText(nombre.getFolioPreimpreso());
                            jtxt_folio.setText(nombre.getFolioBoleto());
                            jtxt_servicio.setText(nombre.getServicio());
                            jtxt_estado.setForeground(new Color(255,0,0));
                            jtxt_estado.setText("No Válido");
                            jtxt_motivo.setVisible(true);
                            jlbl_motivo.setVisible(true);
                            jntxt_folio_p.setText("");
                            jtxt_referencia.setText("");
                            jntxt_folio_p.requestFocus();
                    }
                        
                        if(cosas[1].equals("[3]")){
                            /*JOptionPane.showMessageDialog( this, "La fecha de la corrida del boleto no es para el dia de hoy, verifique fecha y hora",
                                    "TMS - Validar Codigo Barras", JOptionPane.ERROR_MESSAGE );*/
                            jtxt_nombre.setText(nombre.getNombrePasajero());
                            jtxt_asiento.setText(nombre.getNoAsiento());
                            jtxt_corrida.setText(nombre.getClaveCorrida());
                            jtxt_hora.setForeground(new Color(255,0,0));
                            jtxt_hora.setFont(new Font(null, Font.BOLD, 24));
                            jtxt_hora.setText(cosas[0]);

                            colorTipo();
                            jtxt_folio_preimpreso.setText(nombre.getFolioPreimpreso());
                            jtxt_folio.setText(nombre.getFolioBoleto());
                            jtxt_servicio.setText(nombre.getServicio());
                            jtxt_estado.setForeground(new Color(255,0,0));
                            jtxt_estado.setText("No Válido");
                            jtxt_motivo.setVisible(true);
                            jlbl_motivo.setVisible(true);
                            jtxt_motivo.setText("La Fecha u Hora del Boleto no es de la corrida actual.");
                        }
                    }
                    else{
                         JOptionPane.showMessageDialog( this, "¡Error! Ese boleto no Existe(3)",
                                       "TMS - Validar Codigo Barras", JOptionPane.ERROR_MESSAGE);
                         jtxt_codigo.setEditable(true);
                         jntxt_folio_p.setEditable(true);
                         jtxt_referencia.setEditable(true);
                         jntxt_folio_p.setText("");
                         jtxt_referencia.setText("");
                         jtxt_codigo.setText("");
                         jtxt_codigo.setBackground(new Color(192,190,207));
                         jtxt_codigo.requestFocus();
                    }
                        
                }catch(Exception e){
                    JOptionPane.showMessageDialog( this, "Codigo de Barras No Válido",
                                "TMS - Validar Codigo Barras", JOptionPane.ERROR_MESSAGE );
                    System.out.println("Error!!!!!");
                    e.printStackTrace();
                    jtxt_estado.setForeground(new Color(255,0,0));
                    jtxt_estado.setText("No Válido");
                }
    if(jmodo1.isSelected()){
        jlbl_barraEstado.setText("<html>  <font color=FF0000> ESC </font> Iniciar Otra Consulta ");
                jtxt_codigo.setEditable(false);
                jntxt_folio_p.setEditable(false);
                jtxt_referencia.setEditable(false);
        }
    else{
        jtxt_codigo.setText("");
        jntxt_folio_p.setText("");
        jtxt_referencia.setText("");
        jtxt_codigo.requestFocus();
        }
System.out.println("Termina BuscarBoleto()");
    }

    public void colorTipo(){
        String tipo = null;
        if (nombre.getTipoOperacion().equals("VT"))
            tipo = "Venta";
        if (nombre.getTipoOperacion().equals("CN"))
            tipo = "Cancelación";
        if (nombre.getTipoOperacion().equals("HO"))
            tipo = "Cambio de Horario";
        jtxt_operacion.setText(tipo);
        
        if(nombre.getTipoPasajero().equals("A")){//Negro
            jtxt_tipopasajero.setText("Adulto");
            jlabel.setOpaque(true);
            jlabel.setBackground(new Color(0,0,0));
            return;
            }
        if(nombre.getTipoPasajero().equals("M")){//Bco
            jtxt_tipopasajero.setText("Niño");
            jlabel.setOpaque(true);
            jlabel.setBackground(new Color(255,255,255));
            return;
            }
        if(nombre.getTipoPasajero().equals("E")){//Azul
            jtxt_tipopasajero.setText("Estudiante");
            jlabel.setOpaque(true);
            jlabel.setBackground(new Color(0,0,255));
            return;
            }
        if(nombre.getTipoPasajero().equals("S")){//Amarillo
            jtxt_tipopasajero.setText("INSEN");
            jlabel.setOpaque(true);
            jlabel.setBackground(new Color(255,255,0));
            return;
            }
        if(nombre.getTipoPasajero().equals("P")){//Gris
            jtxt_tipopasajero.setText("Maestro");
            jlabel.setOpaque(true);
            jlabel.setBackground(new Color(155,155,164));
            return;
            }
        if(nombre.getTipoPasajero().equals("U")){//Morado
            jtxt_tipopasajero.setText("Estudiante SMA");
            jlabel.setOpaque(true);
            jlabel.setBackground(new Color(128,0,255));
            return;
            }
        if(nombre.getTipoPasajero().equals("V")){//Rosa
            jtxt_tipopasajero.setText("Menor Volaris");
            jlabel.setOpaque(true);
            jlabel.setBackground(new Color(243,136,255));
            return;
            }
        if(nombre.getTipoPasajero().equals("C")){//rojo
            jtxt_tipopasajero.setText("Especial");
            jlabel.setOpaque(true);
            jlabel.setBackground(new Color(255,0,0));
            return;
            }
    }
 
        public void centrarDialogo(){
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension frameSize = this.getSize();
        if (frameSize.height > screenSize.height) {
            frameSize.height = screenSize.height;
        }
        if (frameSize.width > screenSize.width) {
            frameSize.width = screenSize.width;
        }
        this.setLocation( ( screenSize.width - frameSize.width ) / 2, ( screenSize.height - frameSize.height ) / 2 );
    }
    
    public void buscarB(){
            SwingWorker worker = new SwingWorker() {
                public Object construct() {
                    return doWork();
                }

                public void finished() {
                    System.out.println("Finished!!");
                    etiqueta.setVisible(false);
                    progressBar.setVisible(false);
                    enproceso=false;                        
                }
            };
            
            if(enproceso) return;
            enproceso=true;
            worker.start();    
    }
    
}
