/*
 * JDlgCalendario.java
 *
 * Created on 29 de septiembre de 2008, 11:22 AM
 */

package DialogosX;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import tms_venta.JClsColoresInterfaz;

/**
 *
 * @author  ocruz
 */
public class JDlgCalendario extends javax.swing.JDialog {
    
    /** Creates new form JDlgCalendario */
    public JDlgCalendario() {
        Date xDate = new Date();
        xM = Integer.valueOf(new SimpleDateFormat("M").format(xDate));
        xA = Integer.valueOf(new SimpleDateFormat("yyyy").format(xDate));
        for(int i=-1; i<4; i++)
            anhos[i+1] = xA+i;
        initComponents();
        interfazColor();
        this.setTitle("Hoy es: "+new SimpleDateFormat("EEEE, dd-MMM-yy").format(new Date()).toUpperCase());
        jLblBarra.setText("<html><font color="+ColoresInterfaz.cHTML3+">ESC</font> Cerrar</html>");
        Calendario(xM-1, xA);
        xMz=xM; xAz=xA;
        centrarJDialog();
        jCboMes.requestFocusInWindow();
    }
    
    private void centrarJDialog(){
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension frameSize = this.getSize();
        if (frameSize.height > screenSize.height) {
            frameSize.height = screenSize.height;
        }
        if (frameSize.width > screenSize.width) {
            frameSize.width = screenSize.width;
        }
        this.setLocation( ( screenSize.width - frameSize.width ) / 2, ( screenSize.height - frameSize.height ) / 2 );
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jCboMes = new javax.swing.JComboBox(meses);
        jCboAnho = new javax.swing.JComboBox(anhos);
        jScrollPane1 = new javax.swing.JScrollPane();
        jTblDias = new javax.swing.JTable();
        jLblBarra = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setModal(true);
        setResizable(false);
        jCboMes.setFont(new java.awt.Font("Calibri", 1, 12));
        jCboMes.setSelectedIndex(xM-1);
        jCboMes.setFocusTraversalKeysEnabled(false);
        jCboMes.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCboMesKeyPressed(evt);
            }
        });

        jCboAnho.setSelectedItem(xA);
        jCboAnho.setFocusTraversalKeysEnabled(false);
        jCboAnho.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCboAnhoKeyPressed(evt);
            }
        });

        jTblDias.setFont(new java.awt.Font("Calibri", 1, 14));
        jTblDias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTblDias.setModel(xTabla);
        jTblDias.setFocusTraversalKeysEnabled(false);
        jScrollPane1.setViewportView(jTblDias);

        jLblBarra.setFont(new java.awt.Font("Calibri", 1, 16));
        jLblBarra.setText("jLabel1");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jLblBarra, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 310, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(layout.createSequentialGroup()
                        .add(jCboMes, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 111, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jCboAnho, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 64, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jCboAnho)
                    .add(jCboMes, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 147, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jLblBarra))
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCboAnhoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCboAnhoKeyPressed
// TODO add your handling code here:
        switch(evt.getKeyCode()){
            case KeyEvent.VK_RIGHT:
                if(jCboAnho.getSelectedIndex()<jCboAnho.getItemCount()-1)
                    jCboAnho.setSelectedIndex(jCboAnho.getSelectedIndex()+1);
                else
                    jCboAnho.setSelectedIndex(0);
                break;
            case KeyEvent.VK_LEFT:
                if(jCboAnho.getSelectedIndex()>0)
                    jCboAnho.setSelectedIndex(jCboAnho.getSelectedIndex()-1);
                else
                    jCboAnho.setSelectedIndex(jCboAnho.getItemCount()-1);
                break;
            case KeyEvent.VK_ENTER:
                xM=jCboMes.getSelectedIndex();
                xA=Integer.valueOf(jCboAnho.getSelectedItem().toString());
                if(xAz!=xA){
                    Calendario(xM, xA);
                    xAz=xA;
                }
                jCboMes.requestFocus();
            break;
            case KeyEvent.VK_ESCAPE: this.dispose();
        }
    }//GEN-LAST:event_jCboAnhoKeyPressed

    private void jCboMesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCboMesKeyPressed
// TODO add your handling code here:
        switch(evt.getKeyCode()){
            case KeyEvent.VK_RIGHT:
                if(jCboMes.getSelectedIndex()<jCboMes.getItemCount()-1)
                    jCboMes.setSelectedIndex(jCboMes.getSelectedIndex()+1);
                else
                    jCboMes.setSelectedIndex(0);
                break;
            case KeyEvent.VK_LEFT:
                if(jCboMes.getSelectedIndex()>0)
                    jCboMes.setSelectedIndex(jCboMes.getSelectedIndex()-1);
                else
                    jCboMes.setSelectedIndex(jCboMes.getItemCount()-1);
                break;
            case KeyEvent.VK_ENTER:
                xM=jCboMes.getSelectedIndex();
                xA=Integer.valueOf(jCboAnho.getSelectedItem().toString());
                if(xMz!=xM){
                    Calendario(xM, xA);
                    xMz=xM;
                }
                jCboAnho.requestFocus();
                break;
            case KeyEvent.VK_ESCAPE: this.dispose();
        }
    }//GEN-LAST:event_jCboMesKeyPressed

    private void AnchoColumnas(int ancho) {
        int anchoContenedor = ancho;
        TableColumn column;
        for (int i = 0; i < jTblDias.getColumnCount(); i++) {
            column = jTblDias.getColumnModel().getColumn(i);
            switch (i) {
                case 0: column.setPreferredWidth(Math.round(anchoContenedor*(float)0.145)); break;
                case 1: column.setPreferredWidth(Math.round(anchoContenedor*(float)0.1425)); break;
                case 2: column.setPreferredWidth(Math.round(anchoContenedor*(float)0.1425)); break;
                case 3: column.setPreferredWidth(Math.round(anchoContenedor*(float)0.14)); break;
                case 4: column.setPreferredWidth(Math.round(anchoContenedor*(float)0.1425)); break;
                case 5: column.setPreferredWidth(Math.round(anchoContenedor*(float)0.1425)); break;
                case 6: column.setPreferredWidth(Math.round(anchoContenedor*(float)0.145)); break;
            }
        }
    }
    
/******************************* CALENDARIO ***********************************/
    private void Calendario(int pMes, int pAnho){
        datos = new Object[6][7];
        int hoy = 0;
        int diasDeMes = 0;
        int celVacias = 0;
        
        GregorianCalendar actCal = (GregorianCalendar) Calendar.getInstance();
        GregorianCalendar Cal = new GregorianCalendar(pAnho, pMes, 1);
        
        if(actCal.get(Calendar.MONTH) == Cal.get(Calendar.MONTH) &&
           actCal.get(Calendar.YEAR) == Cal.get(Calendar.YEAR)) hoy = Cal.get(Calendar.DAY_OF_MONTH);
        diasDeMes = diasPorMes[pMes];
        
        if(pMes == Calendar.FEBRUARY && Cal.isLeapYear(pAnho)) diasDeMes++;
        
        celVacias = Cal.get(Calendar.DAY_OF_WEEK)-1;
        
        int fila = 0;
        int i=1,j;
        while(i <= diasDeMes){
            for(j=celVacias; j<7; j++){
                /*if(i == hoy) datos[fila][j]=i;
                else */
                datos[fila][j]=i;
                i++;
                if(i > diasDeMes) break;
            }
            fila++;
            celVacias=0;
        }
        xTabla.setDataVector(datos,dias);
        AnchoColumnas(280);
    }
    
    private void interfazColor(){
        this.setBackground(ColoresInterfaz.cFondoPieEncabezado);
        jCboMes.setFont(ColoresInterfaz.fuente3);
        jCboAnho.setFont(ColoresInterfaz.fuente3);
        jTblDias.setFont(ColoresInterfaz.fuente3);
        jLblBarra.setFont(ColoresInterfaz.fuente3);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jCboAnho;
    private javax.swing.JComboBox jCboMes;
    private javax.swing.JLabel jLblBarra;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTblDias;
    // End of variables declaration//GEN-END:variables
    private Object[] meses = {"Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto",
                              "Septiembre", "Octubre", "Noviembre", "Diciembre"};
    private Object[] anhos = new Object[5];
    private Object[] dias = {"Dom", "Lun", "Mar", "Mie", "Jue", "Vie", "Sab"};
    private Object[][] datos = new Object[6][7];
    private int[] diasPorMes = {
                                31, 28, 31, 30, 31, 30,
                                31, 31, 30, 31, 30, 31
                            };
    private int xM, xA;
    private int xMz, xAz;
    private DefaultTableModel xTabla = new DefaultTableModel(null,dias){
            public boolean isCellEditable(int row, int col){
                return false;
            }
        };
    private JClsColoresInterfaz ColoresInterfaz = new JClsColoresInterfaz();
}
