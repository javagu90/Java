package com.alidasoftware.pos.facade;

import java.io.Serializable;
import java.util.List;

import com.alidasoftware.pos.dao.DetalleInventarioDao;
import com.alidasoftware.pos.dao.InventarioDao;
import com.alidasoftware.pos.dao.TraspasoDao;
import com.alidasoftware.pos.exception.AlidaPosException;
import com.alidasoftware.pos.model.Detalleinventario;
import com.alidasoftware.pos.model.Detalletraspaso;
import com.alidasoftware.pos.model.Inventario;
import com.alidasoftware.pos.model.Traspaso;

public class TraspasoFacade  implements Serializable {

	private static final long serialVersionUID = 2636103180502766496L;
	
	private TraspasoDao traspasoDao = new TraspasoDao();
	private InventarioDao inventarioDao = new InventarioDao();
	private DetalleInventarioDao detalleInventarioDao = new DetalleInventarioDao();
	private InventarioFacade invFacade = new InventarioFacade();
	private DetalleInventarioFacade dif = new DetalleInventarioFacade();
	
    
    public void insertTransactionTraspaso(Traspaso traspaso) throws AlidaPosException{
    	try {
	    	traspasoDao.beginTransaction();
	    	Inventario inventarioAuxiliar = invFacade.findInventarioByTienda(traspaso.getTienda1());
	    	for(Detalletraspaso aux : traspaso.getDetalletraspasos()){
	    		Detalleinventario detalleInvAux = dif.findDetalleInventarioByProductTienda(aux.getProducto().getIdproducto(), inventarioAuxiliar.getIdinventario());
	    		float nuevaCantidad = detalleInvAux.getExistenciaventa()-aux.getCantidad();
	    		if(nuevaCantidad >= 0){
	    			detalleInvAux.setExistenciaventa(nuevaCantidad);
	    			dif.updateDetalleinventario(detalleInvAux);
	    		} else {
	    			traspasoDao.rollback();
	    			return;
	    		}
	    	}
	    	traspasoDao.save(traspaso);
	        traspasoDao.commitAndCloseTransaction();
    	} catch (Exception ex) {
    		System.out.println("Error insert " + ex.getMessage());
    		ex.printStackTrace();
			try {
				traspasoDao.rollback();
			} catch (Exception ex1) {
				throw new AlidaPosException(ex1.getMessage());
			}
			throw new AlidaPosException(ex.getMessage());
		} finally {
			if (traspasoDao != null) {
				traspasoDao.closeTransaction();
			}
		}
    }
	
	
	public void createTraspaso(Traspaso traspaso) throws AlidaPosException {
		try {
			traspasoDao.beginTransaction();
			traspasoDao.save(traspaso);
			traspasoDao.commitAndCloseTransaction();
		} catch (Exception ex) {
    		try {
    			traspasoDao.rollback();
    		} catch (Exception ex1) {
    			throw new AlidaPosException(ex1.getMessage());
    		}
    		throw new AlidaPosException(ex.getMessage());
    	} finally {
    		try {
    			traspasoDao.closeTransaction();
    		} catch (Exception ex) {
    			throw new AlidaPosException(ex.getMessage());
    		}
    	}
	}
	
	public void updateTraspaso(Traspaso traspaso) throws AlidaPosException {
		try {
			traspasoDao.beginTransaction();
			Traspaso persistedObject = traspasoDao.find(traspaso.getIdtraspaso());
			persistedObject.setComentarios(traspaso.getComentarios());
			persistedObject.setDetalletraspasos(traspaso.getDetalletraspasos());
			persistedObject.setTienda1(traspaso.getTienda1());
			persistedObject.setTienda2(traspaso.getTienda2());
			persistedObject.setActivo(traspaso.isActivo());
			traspasoDao.update(persistedObject);
			traspasoDao.commitAndCloseTransaction();
		} catch (Exception ex) {
    		try {
    			traspasoDao.rollback();
    		} catch (Exception ex1) {
    			throw new AlidaPosException(ex1.getMessage());
    		}
    		throw new AlidaPosException(ex.getMessage());
    	} finally {
    		try {
    			traspasoDao.closeTransaction();
    		} catch (Exception ex) {
    			throw new AlidaPosException(ex.getMessage());
    		}
    	}
    }
 
    public Traspaso findTraspaso(int idTraspaso) throws AlidaPosException {
    	try {
    		traspasoDao.beginTransaction();
    		Traspaso traspaso = traspasoDao.find(idTraspaso);
    		traspasoDao.closeTransaction();
    		return traspaso;
    	} catch (Exception ex) {
    		try {
    			traspasoDao.rollback();
    		} catch (Exception ex1) {
    			throw new AlidaPosException(ex1.getMessage());
    		}
    		throw new AlidaPosException(ex.getMessage());
    	} finally {
    		try {
    			traspasoDao.closeTransaction();
    		} catch (Exception ex) {
    			throw new AlidaPosException(ex.getMessage());
    		}
    	}
    }
 
    public List<Traspaso> listAll() throws AlidaPosException {
    	try {
    		traspasoDao.beginTransaction();
    		List<Traspaso> result = traspasoDao.findAll();
    		traspasoDao.closeTransaction();
    		return result;
    	} catch (Exception ex) {
    		try {
    			traspasoDao.rollback();
    		} catch (Exception ex1) {
    			throw new AlidaPosException(ex1.getMessage());
    		}
    		throw new AlidaPosException(ex.getMessage());
    	} finally {
    		try {
    			traspasoDao.closeTransaction();
    		} catch (Exception ex) {
    			throw new AlidaPosException(ex.getMessage());
    		}
    	}
    }
 
    public void deleteTraspaso(Traspaso traspaso) throws AlidaPosException {
    	try {
	    	traspasoDao.beginTransaction();
	    	Traspaso persistedObject = traspasoDao.findReferenceOnly(traspaso.getIdtraspaso());
	        traspasoDao.delete(persistedObject);
	        traspasoDao.commitAndCloseTransaction();
    	} catch (Exception ex) {
			try {
				traspasoDao.rollback();
			} catch (Exception ex1) {
				throw new AlidaPosException(ex1.getMessage());
			}
			throw new AlidaPosException(ex.getMessage());
		} finally {
			if (traspasoDao != null) {
				traspasoDao.closeTransaction();
			}
		}
    }

}
